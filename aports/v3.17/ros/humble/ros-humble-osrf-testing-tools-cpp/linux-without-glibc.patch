diff --git a/src/memory_tools/count_function_occurrences_in_backtrace.hpp b/src/memory_tools/count_function_occurrences_in_backtrace.hpp
index c5e0cc2..a8d102b 100644
--- a/src/memory_tools/count_function_occurrences_in_backtrace.hpp
+++ b/src/memory_tools/count_function_occurrences_in_backtrace.hpp
@@ -17,11 +17,11 @@
 
 #include "./safe_fwrite.hpp"
 
-#if defined(_WIN32) || defined(__QNXNTO__) || defined(__ANDROID__)
+#if defined(_WIN32) || defined(__QNXNTO__) || defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__))
 
 // Include nothing for now.
 
-#else  // defined(_WIN32) || defined(__ANDROID__)
+#else  // defined(_WIN32) || defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__))
 
 #include <cstdio>
 #include <cstdlib>
@@ -30,7 +30,7 @@
 #include <execinfo.h>
 #include <stdexcept>
 
-#endif  // defined(_WIN32) || defined(__ANDROID__)
+#endif  // defined(_WIN32) || defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__))
 
 namespace osrf_testing_tools_cpp
 {
@@ -50,7 +50,7 @@ struct is_function_pointer
   >
 {};
 
-#if defined(_WIN32) || defined(__QNXNTO__) || defined(__ANDROID__)
+#if defined(_WIN32) || defined(__QNXNTO__) || defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__))
 
 struct count_function_occurrences_in_backtrace_is_implemented : std::false_type {};
 
@@ -62,7 +62,7 @@ impl_count_function_occurrences_in_backtrace(void * function_address)
   throw not_implemented();
 }
 
-#else  // defined(_WIN32) || defined(__ANDROID__)
+#else  // defined(_WIN32) || defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__))
 
 struct count_function_occurrences_in_backtrace_is_implemented : std::true_type {};
 
diff --git a/src/memory_tools/memory_tools.cpp b/src/memory_tools/memory_tools.cpp
index 79852ca..14a3ca6 100644
--- a/src/memory_tools/memory_tools.cpp
+++ b/src/memory_tools/memory_tools.cpp
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#if defined(__linux__) && !defined(__ANDROID__)
+#if defined(__linux__) && !defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__))
 
 #include "./impl/linux.cpp"
 #include "./impl/unix_common.cpp"
diff --git a/src/memory_tools/memory_tools_service.cpp b/src/memory_tools/memory_tools_service.cpp
index 5984a5c..e8be8ce 100644
--- a/src/memory_tools/memory_tools_service.cpp
+++ b/src/memory_tools/memory_tools_service.cpp
@@ -96,7 +96,7 @@ MemoryToolsService::print_backtrace()
 StackTrace *
 MemoryToolsService::get_stack_trace()
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   if (nullptr == impl_->lazy_stack_trace) {
     backward::StackTrace st;
     st.load_here(256);
@@ -107,7 +107,7 @@ MemoryToolsService::get_stack_trace()
   return impl_->lazy_stack_trace.get();
 #else
   return nullptr;
-#endif  // !defined(_WIN32) && !defined(__ANDROID__)
+#endif  // !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
 }
 
 const char *
diff --git a/src/memory_tools/print_backtrace.hpp b/src/memory_tools/print_backtrace.hpp
index d23c874..93571f9 100644
--- a/src/memory_tools/print_backtrace.hpp
+++ b/src/memory_tools/print_backtrace.hpp
@@ -15,7 +15,7 @@
 #ifndef MEMORY_TOOLS__PRINT_BACKTRACE_HPP_
 #define MEMORY_TOOLS__PRINT_BACKTRACE_HPP_
 
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && (defined(__linux__) && !defined(__GLIBC__))
 
 # pragma GCC diagnostic push
 # ifdef __clang__
@@ -27,7 +27,7 @@
 
 # pragma GCC diagnostic pop
 
-#endif  // !defined(_WIN32) && !defined(__ANDROID__)
+#endif  // !defined(_WIN32) && !defined(__ANDROID__) && (defined(__linux__) && !defined(__GLIBC__))
 
 namespace osrf_testing_tools_cpp
 {
@@ -38,14 +38,14 @@ template<int MaxStackDepth = 64>
 void
 print_backtrace(FILE * out = stderr)
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && (defined(__linux__) && !defined(__GLIBC__))
   backward::StackTrace st;
   st.load_here(MaxStackDepth);
   backward::Printer p;
   p.print(st, out);
 #else
   fprintf(out, "backtrace unavailable on Windows and Android\n");
-#endif  // !defined(_WIN32) && !defined(__ANDROID__)
+#endif  // !defined(_WIN32) && !defined(__ANDROID__) && (defined(__linux__) && !defined(__GLIBC__))
 }
 
 }  // namespace memory_tools
diff --git a/src/memory_tools/stack_trace.cpp b/src/memory_tools/stack_trace.cpp
index bef4494..559dc6b 100644
--- a/src/memory_tools/stack_trace.cpp
+++ b/src/memory_tools/stack_trace.cpp
@@ -31,7 +31,7 @@ SourceLocation::~SourceLocation()
 const std::string &
 SourceLocation::function() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->source_location->function;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -41,7 +41,7 @@ SourceLocation::function() const
 const std::string &
 SourceLocation::filename() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->source_location->filename;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -51,7 +51,7 @@ SourceLocation::filename() const
 size_t
 SourceLocation::line() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->source_location->line;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -61,7 +61,7 @@ SourceLocation::line() const
 size_t
 SourceLocation::column() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->source_location->col;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -82,7 +82,7 @@ Trace::~Trace()
 void *
 Trace::address() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) &&! (defined(__linux__) && !defined(__GLIBC__))
   return impl_->resolved_trace.addr;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -92,7 +92,7 @@ Trace::address() const
 size_t
 Trace::index_in_stack() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->resolved_trace.idx;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -102,7 +102,7 @@ Trace::index_in_stack() const
 const std::string &
 Trace::object_filename() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->resolved_trace.object_filename;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -112,7 +112,7 @@ Trace::object_filename() const
 const std::string &
 Trace::object_function() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->resolved_trace.object_function;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -122,7 +122,7 @@ Trace::object_function() const
 const SourceLocation &
 Trace::source_location() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->source_location;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -132,7 +132,7 @@ Trace::source_location() const
 const std::vector<SourceLocation> &
 Trace::inlined_source_locations() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->inlined_source_locations;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -149,7 +149,7 @@ StackTrace::~StackTrace()
 std::thread::id
 StackTrace::thread_id() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->thread_id;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -159,7 +159,7 @@ StackTrace::thread_id() const
 const std::vector<Trace> &
 StackTrace::get_traces() const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   return impl_->traces;
 #else
   throw std::runtime_error("not implemented on Windows or Android");
@@ -169,7 +169,7 @@ StackTrace::get_traces() const
 std::vector<Trace>
 StackTrace::get_traces_from_function_name(const char * function_name) const
 {
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
   std::vector<Trace> result;
   bool function_found = false;
   for (const Trace & trace : impl_->traces) {
diff --git a/src/memory_tools/stack_trace_impl.hpp b/src/memory_tools/stack_trace_impl.hpp
index a275c9b..8263924 100644
--- a/src/memory_tools/stack_trace_impl.hpp
+++ b/src/memory_tools/stack_trace_impl.hpp
@@ -21,7 +21,7 @@
 
 #include "osrf_testing_tools_cpp/memory_tools/stack_trace.hpp"
 
-#if !defined(_WIN32) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
 
 #pragma GCC diagnostic push
 #ifdef __clang__
@@ -123,6 +123,6 @@ struct StackTraceImpl {};
 }  // namespace memory_tools
 }  // namespace osrf_testing_tools_cpp
 
-#endif  // !defined(_WIN32) && !defined(__ANDROID__)
+#endif  // !defined(_WIN32) && !defined(__ANDROID__) && !(defined(__linux__) && !defined(__GLIBC__))
 
 #endif  // OSRF_TESTING_TOOLS_CPP__STACK_TRACE_IMPL_HPP_
diff --git a/src/memory_tools/vendor/bombela/backward-cpp/backward.hpp b/src/memory_tools/vendor/bombela/backward-cpp/backward.hpp
index ac7ad51..46d86c9 100644
--- a/src/memory_tools/vendor/bombela/backward-cpp/backward.hpp
+++ b/src/memory_tools/vendor/bombela/backward-cpp/backward.hpp
@@ -201,7 +201,7 @@
 
 #include <cxxabi.h>
 #include <fcntl.h>
-#ifdef __ANDROID__
+#if defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__))
 //		Old Android API levels define _Unwind_Ptr in both link.h and
 // unwind.h 		Rename the one in link.h as we are not going to be using
 // it
@@ -240,6 +240,13 @@
 #include <dwarf.h>
 #include <elfutils/libdw.h>
 #include <elfutils/libdwfl.h>
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#include <dlfcn.h>
+#undef _GNU_SOURCE
+#else
+#include <dlfcn.h>
+#endif
 #endif
 
 #if BACKWARD_HAS_DWARF == 1
@@ -737,7 +744,7 @@ public:
 protected:
   void load_thread_info() {
 #ifdef BACKWARD_SYSTEM_LINUX
-#ifndef __ANDROID__
+#if !(defined(__ANDROID__) || (defined(__linux__) && !defined(__GLIBC__)))
     _thread_id = static_cast<size_t>(syscall(SYS_gettid));
 #else
     _thread_id = static_cast<size_t>(gettid());
