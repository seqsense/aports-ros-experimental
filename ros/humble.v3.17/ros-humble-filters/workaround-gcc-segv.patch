diff --git a/include/filters/filter_chain.hpp b/include/filters/filter_chain.hpp
index 5780499..25059e9 100644
--- a/include/filters/filter_chain.hpp
+++ b/include/filters/filter_chain.hpp
@@ -59,7 +59,7 @@ struct FoundFilter
 /**
  * \brief Read params and figure out what filters to load
  */
-inline bool
+bool NOINLINE
 load_chain_config(
   const std::string & param_prefix,
   const rclcpp::node_interfaces::NodeLoggingInterface::SharedPtr & node_logger,
@@ -105,23 +105,23 @@ load_chain_config(
       // Reached end of chain
       break;
     } else if (got_name != got_type) {
-      RCLCPP_FATAL(
-        node_logger->get_logger(),
-        "%s and %s are required", name_desc.name.c_str(), type_desc.name.c_str());
+      // RCLCPP_FATAL(
+      //   node_logger->get_logger(),
+      //   "%s and %s are required", name_desc.name.c_str(), type_desc.name.c_str());
       return false;
     }
 
     // Make sure 'name' and 'type' are strings
     if (rclcpp::PARAMETER_STRING != param_name.get_type()) {
-      RCLCPP_FATAL(
-        node_logger->get_logger(),
-        "%s must be a string", name_desc.name.c_str());
+      // RCLCPP_FATAL(
+      //   node_logger->get_logger(),
+      //   "%s must be a string", name_desc.name.c_str());
       return false;
     }
     if (rclcpp::PARAMETER_STRING != param_type.get_type()) {
-      RCLCPP_FATAL(
-        node_logger->get_logger(),
-        "%s must be a string", type_desc.name.c_str());
+      // RCLCPP_FATAL(
+      //   node_logger->get_logger(),
+      //   "%s must be a string", type_desc.name.c_str());
       return false;
     }
 
@@ -132,18 +132,18 @@ load_chain_config(
     // Make sure 'name' is unique
     for (const auto & filter : found_filters) {
       if (found_filter.name == filter.name) {
-        RCLCPP_FATAL(
-          node_logger->get_logger(),
-          "A filter with the name %s already exists", filter.name.c_str());
+        // RCLCPP_FATAL(
+        //   node_logger->get_logger(),
+        //   "A filter with the name %s already exists", filter.name.c_str());
         return false;
       }
     }
 
     // Make sure 'type' is formated as 'package_name/filtername'
     if (1 != std::count(found_filter.type.cbegin(), found_filter.type.cend(), '/')) {
-      RCLCPP_FATAL(
-        node_logger->get_logger(),
-        "%s must be of form <package_name>/<filter_name>", found_filter.type.c_str());
+      // RCLCPP_FATAL(
+      //   node_logger->get_logger(),
+      //   "%s must be of form <package_name>/<filter_name>", found_filter.type.c_str());
       return false;
     }
 
@@ -246,7 +246,7 @@ public:
     const rclcpp::node_interfaces::NodeParametersInterface::SharedPtr & node_params)
   {
     if (configured_) {
-      RCLCPP_ERROR(logging_interface_->get_logger(), "Filter chain is already configured");
+      // RCLCPP_ERROR(logging_interface_->get_logger(), "Filter chain is already configured");
       return false;
     }
     logging_interface_ = node_logger;
@@ -267,14 +267,14 @@ public:
       try {
         loaded_filter = loader_.createUniqueInstance(filter.type);
       } catch (const pluginlib::LibraryLoadException & e) {
-        RCLCPP_FATAL(
-          logging_interface_->get_logger(),
-          "Could not load library for %s: %s", filter.type.c_str(), e.what());
+        // RCLCPP_FATAL(
+        //   logging_interface_->get_logger(),
+        //   "Could not load library for %s: %s", filter.type.c_str(), e.what());
         return false;
       } catch (const pluginlib::CreateClassException & e) {
-        RCLCPP_FATAL(
-          logging_interface_->get_logger(),
-          "Could not construct class %s: %s", filter.type.c_str(), e.what());
+        // RCLCPP_FATAL(
+        //   logging_interface_->get_logger(),
+        //   "Could not construct class %s: %s", filter.type.c_str(), e.what());
         return false;
       }
 
@@ -282,9 +282,9 @@ public:
       if (!loaded_filter || !loaded_filter->configure(
           filter.param_prefix, filter.name, logging_interface_, params_interface_))
       {
-        RCLCPP_FATAL(
-          logging_interface_->get_logger(),
-          "Could not configure %s of type %s", filter.name.c_str(), filter.type.c_str());
+        // RCLCPP_FATAL(
+        //   logging_interface_->get_logger(),
+        //   "Could not configure %s of type %s", filter.name.c_str(), filter.type.c_str());
         return false;
       }
       loaded_filters.emplace_back(std::move(loaded_filter));
@@ -395,7 +395,7 @@ public:
     const rclcpp::node_interfaces::NodeParametersInterface::SharedPtr & node_params)
   {
     if (configured_) {
-      RCLCPP_ERROR(logging_interface_->get_logger(), "Filter chain is already configured");
+      // RCLCPP_ERROR(logging_interface_->get_logger(), "Filter chain is already configured");
       return false;
     }
     logging_interface_ = node_logger;
@@ -416,14 +416,14 @@ public:
       try {
         loaded_filter = loader_.createUniqueInstance(filter.type);
       } catch (const pluginlib::LibraryLoadException & e) {
-        RCLCPP_FATAL(
-          logging_interface_->get_logger(),
-          "Could not load library for %s: %s", filter.type.c_str(), e.what());
+        // RCLCPP_FATAL(
+        //   logging_interface_->get_logger(),
+        //   "Could not load library for %s: %s", filter.type.c_str(), e.what());
         return false;
       } catch (const pluginlib::CreateClassException & e) {
-        RCLCPP_FATAL(
-          logging_interface_->get_logger(),
-          "Could not construct class %s: %s", filter.type.c_str(), e.what());
+        // RCLCPP_FATAL(
+        //   logging_interface_->get_logger(),
+        //   "Could not construct class %s: %s", filter.type.c_str(), e.what());
         return false;
       }
 
@@ -432,9 +432,9 @@ public:
           number_of_channels, filter.param_prefix, filter.name,
           logging_interface_, params_interface_))
       {
-        RCLCPP_FATAL(
-          logging_interface_->get_logger(),
-          "Could not configure %s of type %s", filter.name.c_str(), filter.type.c_str());
+        // RCLCPP_FATAL(
+        //   logging_interface_->get_logger(),
+        //   "Could not configure %s of type %s", filter.name.c_str(), filter.type.c_str());
         return false;
       }
       loaded_filters.emplace_back(std::move(loaded_filter));
