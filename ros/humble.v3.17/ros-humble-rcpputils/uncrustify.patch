diff --git a/include/rcpputils/scope_exit.hpp b/include/rcpputils/scope_exit.hpp
index c55ade1..f53c3e1 100644
--- a/include/rcpputils/scope_exit.hpp
+++ b/include/rcpputils/scope_exit.hpp
@@ -63,6 +63,6 @@ make_scope_exit(CallableT && callable)
 }  // namespace rcpputils
 
 #define RCPPUTILS_SCOPE_EXIT(code) \
-  auto RCUTILS_JOIN(scope_exit_, __LINE__) = rcpputils::make_scope_exit([&]() {code;})
+        auto RCUTILS_JOIN(scope_exit_, __LINE__) = rcpputils::make_scope_exit([&]() {code;})
 
 #endif  // RCPPUTILS__SCOPE_EXIT_HPP_
diff --git a/include/rcpputils/thread_safety_annotations.hpp b/include/rcpputils/thread_safety_annotations.hpp
index 054766f..49fa887 100644
--- a/include/rcpputils/thread_safety_annotations.hpp
+++ b/include/rcpputils/thread_safety_annotations.hpp
@@ -67,7 +67,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#capability-string
   */
 #define RCPPUTILS_TSA_CAPABILITY(x) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(capability(x))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(capability(x))
 
 /**
   * \def RCPPUTILS_TSA_SCOPED_CAPABILITY
@@ -79,7 +79,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#scoped-capability
   */
 #define RCPPUTILS_TSA_SCOPED_CAPABILITY \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(scoped_lockable)
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(scoped_lockable)
 
 /**
   * \def RCPPUTILS_TSA_GUARDED_BY
@@ -90,7 +90,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * access. https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#guarded-by-c-and-pt-guarded-by-c
   */
 #define RCPPUTILS_TSA_GUARDED_BY(x) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(guarded_by(x))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(guarded_by(x))
 
 /**
   * \def RCPPUTILS_TSA_PT_GUARDED_BY
@@ -102,7 +102,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#guarded-by-c-and-pt-guarded-by-c
   */
 #define RCPPUTILS_TSA_PT_GUARDED_BY(x) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(pt_guarded_by(x))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(pt_guarded_by(x))
 
 /**
   * \def RCPPUTILS_TSA_ACQUIRED_BEFORE
@@ -114,7 +114,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquired-before-acquired-after
   */
 #define RCPPUTILS_TSA_ACQUIRED_BEFORE(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquired_before(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquired_before(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_ACQUIRED_AFTER
@@ -126,7 +126,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquired-before-acquired-after
   */
 #define RCPPUTILS_TSA_ACQUIRED_AFTER(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquired_after(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquired_after(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_REQUIRES
@@ -138,7 +138,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#requires-requires-shared
   */
 #define RCPPUTILS_TSA_REQUIRES(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(requires_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(requires_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_REQUIRES_SHARED
@@ -150,7 +150,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#requires-requires-shared
   */
 #define RCPPUTILS_TSA_REQUIRES_SHARED(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(requires_shared_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(requires_shared_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_ACQUIRE
@@ -161,7 +161,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquire-acquire-shared-release-release-shared
   */
 #define RCPPUTILS_TSA_ACQUIRE(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquire_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquire_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_ACQUIRE_SHARED
@@ -172,7 +172,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquire-acquire-shared-release-release-shared
   */
 #define RCPPUTILS_TSA_ACQUIRE_SHARED(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquire_shared_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(acquire_shared_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_RELEASE
@@ -183,7 +183,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquire-acquire-shared-release-release-shared
   */
 #define RCPPUTILS_TSA_RELEASE(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(release_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(release_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_RELEASE_SHARED
@@ -194,7 +194,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquire-acquire-shared-release-release-shared
   */
 #define RCPPUTILS_TSA_RELEASE_SHARED(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(release_shared_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(release_shared_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_TRY_ACQUIRE
@@ -204,7 +204,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#try-acquire-bool-try-acquire-shared-bool
   */
 #define RCPPUTILS_TSA_TRY_ACQUIRE(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(try_acquire_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(try_acquire_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_TRY_ACQUIRE_SHARED
@@ -214,7 +214,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#try-acquire-bool-try-acquire-shared-bool
   */
 #define RCPPUTILS_TSA_TRY_ACQUIRE_SHARED(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(try_acquire_shared_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(try_acquire_shared_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_EXCLUDES
@@ -228,7 +228,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#negative-capabilities
   */
 #define RCPPUTILS_TSA_EXCLUDES(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(locks_excluded(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(locks_excluded(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_ASSERT_CAPABILITY
@@ -238,7 +238,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability
   */
 #define RCPPUTILS_TSA_ASSERT_CAPABILITY(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(assert_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(assert_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_ASSERT_SHARED_CAPABILITY
@@ -249,7 +249,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability
   */
 #define RCPPUTILS_TSA_ASSERT_SHARED_CAPABILITY(...) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(assert_shared_capability(__VA_ARGS__))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(assert_shared_capability(__VA_ARGS__))
 
 /**
   * \def RCPPUTILS_TSA_RETURN_CAPABILITY
@@ -260,7 +260,7 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#return-capability-c
   */
 #define RCPPUTILS_TSA_RETURN_CAPABILITY(x) \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(lock_returned(x))
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(lock_returned(x))
 
 /**
   * \def RCPPUTILS_TSA_NO_THREAD_SAFETY_ANALYSIS
@@ -273,6 +273,6 @@ inline const std::mutex & operator!(const std::mutex & a)
   * https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#return-capability-c
   */
 #define RCPPUTILS_TSA_NO_THREAD_SAFETY_ANALYSIS \
-  RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(no_thread_safety_analysis)
+        RCPPUTILS_THREAD_ANNOTATION_ATTRIBUTE_IMPL(no_thread_safety_analysis)
 
 #endif  // RCPPUTILS__THREAD_SAFETY_ANNOTATIONS_HPP_
diff --git a/test/test_clamp.cpp b/test/test_clamp.cpp
index c6563be..5248a9d 100644
--- a/test/test_clamp.cpp
+++ b/test/test_clamp.cpp
@@ -28,9 +28,9 @@ TEST(test_clamp, test_basic) {
 
 TEST(test_clamp, test_cmp) {
   auto cmp = [](const int & a, const int & b)
-    {
-      return a < b;
-    };
+  {
+    return a < b;
+  };
   EXPECT_EQ(rcppmath::clamp(1, 2, 5, cmp), 2);
   EXPECT_EQ(rcppmath::clamp(2, 2, 5, cmp), 2);
   EXPECT_EQ(rcppmath::clamp(5, 2, 5, cmp), 5);
