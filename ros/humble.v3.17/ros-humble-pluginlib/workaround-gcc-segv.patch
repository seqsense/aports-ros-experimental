diff --git a/include/pluginlib/class_loader_imp.hpp b/include/pluginlib/class_loader_imp.hpp
index a41790b..87047fd 100644
--- a/include/pluginlib/class_loader_imp.hpp
+++ b/include/pluginlib/class_loader_imp.hpp
@@ -85,8 +85,8 @@ ClassLoader<T>::ClassLoader(
   lowlevel_class_loader_(false)
   /***************************************************************************/
 {
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Creating ClassLoader, base = %s, address = %p",
-    base_class.c_str(), static_cast<void *>(this));
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Creating ClassLoader, base = %s, address = %p",
+  //   base_class.c_str(), static_cast<void *>(this));
   try {
     ament_index_cpp::get_package_prefix(package_);
   } catch (const ament_index_cpp::PackageNotFoundError & exception) {
@@ -98,18 +98,18 @@ ClassLoader<T>::ClassLoader(
     plugin_xml_paths_ = getPluginXmlPaths(package_, attrib_name_);
   }
   classes_available_ = determineAvailableClasses(plugin_xml_paths_);
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-    "Finished constructring ClassLoader, base = %s, address = %p",
-    base_class.c_str(), static_cast<void *>(this));
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+  //   "Finished constructring ClassLoader, base = %s, address = %p",
+  //   base_class.c_str(), static_cast<void *>(this));
 }
 
 template<class T>
 ClassLoader<T>::~ClassLoader()
 /***************************************************************************/
 {
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-    "Destroying ClassLoader, base = %s, address = %p",
-    getBaseClassType().c_str(), static_cast<void *>(this));
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+  //   "Destroying ClassLoader, base = %s, address = %p",
+  //   getBaseClassType().c_str(), static_cast<void *>(this));
 }
 
 
@@ -118,28 +118,28 @@ T * ClassLoader<T>::createClassInstance(const std::string & lookup_name, bool au
 /***************************************************************************/
 {
   // Note: This method is deprecated
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-    "In deprecated call createClassInstance(), lookup_name = %s, auto_load = %i.",
-    (lookup_name.c_str()), auto_load);
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+  //   "In deprecated call createClassInstance(), lookup_name = %s, auto_load = %i.",
+  //   (lookup_name.c_str()), auto_load);
 
   if (auto_load && !isClassLoaded(lookup_name)) {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Autoloading class library before attempting to create instance.");
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Autoloading class library before attempting to create instance.");
     loadLibraryForClass(lookup_name);
   }
 
   try {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Attempting to create instance through low-level MultiLibraryClassLoader...");
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Attempting to create instance through low-level MultiLibraryClassLoader...");
     T * obj = lowlevel_class_loader_.createUnmanagedInstance<T>(getClassType(lookup_name));
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Instance created with object pointer = %p", static_cast<void *>(obj));
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Instance created with object pointer = %p", static_cast<void *>(obj));
 
     return obj;
   } catch (const class_loader::CreateClassException & ex) {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "CreateClassException about to be raised for class %s",
-      lookup_name.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "CreateClassException about to be raised for class %s",
+    //   lookup_name.c_str());
     throw pluginlib::CreateClassException(ex.what());
   }
 }
@@ -154,9 +154,9 @@ std::shared_ptr<T> ClassLoader<T>::createSharedInstance(const std::string & look
 template<class T>
 UniquePtr<T> ClassLoader<T>::createUniqueInstance(const std::string & lookup_name)
 {
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-    "Attempting to create managed (unique) instance for class %s.",
-    lookup_name.c_str());
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+  //   "Attempting to create managed (unique) instance for class %s.",
+  //   lookup_name.c_str());
 
   if (!isClassLoaded(lookup_name)) {
     loadLibraryForClass(lookup_name);
@@ -164,21 +164,21 @@ UniquePtr<T> ClassLoader<T>::createUniqueInstance(const std::string & lookup_nam
 
   try {
     std::string class_type = getClassType(lookup_name);
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "%s maps to real class type %s",
-      lookup_name.c_str(), class_type.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "%s maps to real class type %s",
+    //   lookup_name.c_str(), class_type.c_str());
 
     UniquePtr<T> obj = lowlevel_class_loader_.createUniqueInstance<T>(class_type);
 
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "std::unique_ptr to object of real type %s created.",
-      class_type.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "std::unique_ptr to object of real type %s created.",
+    //   class_type.c_str());
 
     return obj;
   } catch (const class_loader::CreateClassException & ex) {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Exception raised by low-level multi-library class loader when attempting "
-      "to create instance of class %s.",
-      lookup_name.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Exception raised by low-level multi-library class loader when attempting "
+    //   "to create instance of class %s.",
+    //   lookup_name.c_str());
     throw pluginlib::CreateClassException(ex.what());
   }
 }
@@ -187,9 +187,9 @@ template<class T>
 T * ClassLoader<T>::createUnmanagedInstance(const std::string & lookup_name)
 /***************************************************************************/
 {
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-    "Attempting to create UNMANAGED instance for class %s.",
-    lookup_name.c_str());
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+  //   "Attempting to create UNMANAGED instance for class %s.",
+  //   lookup_name.c_str());
 
   if (!isClassLoaded(lookup_name)) {
     loadLibraryForClass(lookup_name);
@@ -197,20 +197,20 @@ T * ClassLoader<T>::createUnmanagedInstance(const std::string & lookup_name)
 
   T * instance = 0;
   try {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Attempting to create instance through low level multi-library class loader.");
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Attempting to create instance through low level multi-library class loader.");
     std::string class_type = getClassType(lookup_name);
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "%s maps to real class type %s",
-      lookup_name.c_str(), class_type.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "%s maps to real class type %s",
+    //   lookup_name.c_str(), class_type.c_str());
     instance = lowlevel_class_loader_.createUnmanagedInstance<T>(class_type);
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Instance of type %s created.",
-      class_type.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Instance of type %s created.",
+    //   class_type.c_str());
   } catch (const class_loader::CreateClassException & ex) {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Exception raised by low-level multi-library class loader when attempting "
-      "to create UNMANAGED instance of class %s.",
-      lookup_name.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Exception raised by low-level multi-library class loader when attempting "
+    //   "to create UNMANAGED instance of class %s.",
+    //   lookup_name.c_str());
     throw pluginlib::CreateClassException(ex.what());
   }
   return instance;
@@ -238,11 +238,11 @@ std::vector<std::string> ClassLoader<T>::getPluginXmlPaths(
       {
         using ament_index_cpp::get_resource;
         if (!get_resource(resource_name, package_prefix_pair.first, resource_content)) {
-          RCUTILS_LOG_WARN_NAMED("pluginlib.ClassLoader",
-            "unexpectedly not able to find ament resource '%s' for package '%s'",
-            resource_name.c_str(),
-            package_prefix_pair.first.c_str()
-          );
+          RCUTILS_LOG_WARN_NAMED("pluginlib.ClassLoader",
+            ("unexpectedly not able to find ament resource '"
+             + resource_name + "' for package '"
+             + package_prefix_pair.first + "'").c_str()
+          );
           continue;
         }
       }
@@ -271,7 +271,7 @@ std::map<std::string, ClassDesc> ClassLoader<T>::determineAvailableClasses(
   // seem to be correct.
   // With time I keep correcting small things, but a good rewrite is needed.
 
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Entering determineAvailableClasses()...");
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Entering determineAvailableClasses()...");
   std::map<std::string, ClassDesc> classes_available;
 
   // Walk the list of all plugin XML files (variable "paths") that are exported by the build system
@@ -281,13 +281,13 @@ std::map<std::string, ClassDesc> ClassLoader<T>::determineAvailableClasses(
     try {
       processSingleXMLPluginFile(*it, classes_available);
     } catch (const pluginlib::InvalidXMLException & e) {
-      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
-        "Skipped loading plugin with error: %s.",
-        e.what());
+      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
+        (std::string("Skipped loading plugin with error: ") + e.what() + ".").c_str()
+      );
     }
   }
 
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Exiting determineAvailableClasses()...");
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Exiting determineAvailableClasses()...");
   return classes_available;
 }
 
@@ -299,9 +299,9 @@ std::string ClassLoader<T>::extractPackageNameFromPackageXML(const std::string &
   document.LoadFile(package_xml_path.c_str());
   tinyxml2::XMLElement * doc_root_node = document.FirstChildElement("package");
   if (NULL == doc_root_node) {
-    RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
-      "Could not find a root element for package manifest at %s.",
-      package_xml_path.c_str());
+    RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
+      ("Could not find a root element for package manifest at " + package_xml_path + ".").c_str()
+    );
     return "";
   }
 
@@ -309,19 +309,19 @@ std::string ClassLoader<T>::extractPackageNameFromPackageXML(const std::string &
 
   tinyxml2::XMLElement * package_name_node = doc_root_node->FirstChildElement("name");
   if (NULL == package_name_node) {
-    RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
-      "package.xml at %s does not have a <name> tag! Cannot determine package "
-      "which exports plugin.",
-      package_xml_path.c_str());
+    RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
+      ("package.xml at " + package_xml_path + " does not have a <name> tag! Cannot determine package "
+      "which exports plugin.").c_str()
+    );
     return "";
   }
 
   const char* package_name_node_txt = package_name_node->GetText();
   if (NULL == package_name_node_txt) {
-    RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
-      "package.xml at %s has an invalid <name> tag! Cannot determine package "
-      "which exports plugin.",
-      package_xml_path.c_str());
+    RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
+      ("package.xml at " + package_xml_path + " has an invalid <name> tag! Cannot determine package "
+      "which exports plugin.").c_str()
+    );
     return "";
   }
 
@@ -384,10 +384,10 @@ std::vector<std::string> ClassLoader<T>::getAllLibraryPathsToTry(
   const char * lib_prefix = "lib";
   if (library_name.rfind(lib_prefix, 0) == 0) {
     library_name_alternative = library_name.substr(strlen(lib_prefix));
-    RCUTILS_LOG_WARN_NAMED("pluginlib.ClassLoader",
-      "given plugin name '%s' should be '%s' for better portability",
-      library_name.c_str(),
-      library_name_alternative.c_str());
+    RCUTILS_LOG_WARN_NAMED("pluginlib.ClassLoader",
+      ("given plugin name '" + library_name + "' should be '"
+       + library_name_alternative + "' for better portability").c_str()
+    );
   } else {
     library_name_alternative = lib_prefix + library_name;
   }
@@ -421,10 +421,10 @@ std::vector<std::string> ClassLoader<T>::getAllLibraryPathsToTry(
   }
 
   for (auto && path : all_paths) {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "[search path for '%s']: '%s'",
-      library_name.c_str(),
-      path.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "[search path for '%s']: '%s'",
+    //   library_name.c_str(),
+    //   path.c_str());
   }
 
   return all_paths;
@@ -478,21 +478,21 @@ std::string ClassLoader<T>::getClassLibraryPath(const std::string & lookup_name)
   }
   ClassMapIterator it = classes_available_.find(lookup_name);
   std::string library_name = it->second.library_name_;
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-    "Class %s maps to library %s in classes_available_.",
-    lookup_name.c_str(), library_name.c_str());
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+  //   "Class %s maps to library %s in classes_available_.",
+  //   lookup_name.c_str(), library_name.c_str());
 
   std::vector<std::string> paths_to_try =
     getAllLibraryPathsToTry(library_name, it->second.package_);
 
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-    "Iterating through all possible paths where %s could be located...",
-    library_name.c_str());
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+  //   "Iterating through all possible paths where %s could be located...",
+  //   library_name.c_str());
   for (auto it = paths_to_try.begin(); it != paths_to_try.end(); it++) {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Checking path %s ", it->c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Checking path %s ", it->c_str());
     if (rcpputils::fs::exists(*it)) {
-      RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Library %s found at explicit path %s.",
-        library_name.c_str(), it->c_str());
+      // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Library %s found at explicit path %s.",
+      //   library_name.c_str(), it->c_str());
       return *it;
     }
   }
@@ -642,9 +642,9 @@ void ClassLoader<T>::loadLibraryForClass(const std::string & lookup_name)
 {
   ClassMapIterator it = classes_available_.find(lookup_name);
   if (it == classes_available_.end()) {
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Class %s has no mapping in classes_available_.",
-      lookup_name.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Class %s has no mapping in classes_available_.",
+    //   lookup_name.c_str());
     throw pluginlib::LibraryLoadException(getErrorStringForUnknownClass(lookup_name));
   }
 
@@ -669,7 +669,7 @@ void ClassLoader<T>::processSingleXMLPluginFile(
   ClassDesc> & classes_available)
 /***************************************************************************/
 {
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Processing xml file %s...", xml_file.c_str());
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Processing xml file %s...", xml_file.c_str());
   tinyxml2::XMLDocument document;
   document.LoadFile(xml_file.c_str());
   tinyxml2::XMLElement * config = document.RootElement();
@@ -703,24 +703,24 @@ void ClassLoader<T>::processSingleXMLPluginFile(
   while (library != NULL) {
     const char* path = library->Attribute("path");
     if (NULL == path) {
-      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
-        "Attribute 'path' in 'library' tag is missing in %s.", xml_file.c_str());
+      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
+        ("Attribute 'path' in 'library' tag is missing in " + xml_file + ".").c_str());
       continue;
     }
     std::string library_path(path);
     if (0 == library_path.size()) {
-      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
-        "Failed to find Path Attirbute in library element in %s", xml_file.c_str());
+      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
+        ("Failed to find Path Attirbute in library element in " + xml_file + ".").c_str());
       continue;
     }
 
     std::string package_name = getPackageFromPluginXMLFilePath(xml_file);
     if ("" == package_name) {
-      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
-        "Could not find package manifest (neither package.xml or deprecated "
-        "manifest.xml) at same directory level as the plugin XML file %s. "
-        "Plugins will likely not be exported properly.\n)",
-        xml_file.c_str());
+      RCUTILS_LOG_ERROR_NAMED("pluginlib.ClassLoader",
+        ("Could not find package manifest (neither package.xml or deprecated "
+        "manifest.xml) at same directory level as the plugin XML file " + xml_file + ". "
+        "Plugins will likely not be exported properly.\n)").c_str()
+      );
     }
 
     tinyxml2::XMLElement * class_element = library->FirstChildElement("class");
@@ -744,14 +744,14 @@ void ClassLoader<T>::processSingleXMLPluginFile(
       std::string lookup_name;
       if (class_element->Attribute("name") != NULL) {
         lookup_name = class_element->Attribute("name");
-        RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-          "XML file specifies lookup name (i.e. magic name) = %s.",
-          lookup_name.c_str());
+        // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+        //   "XML file specifies lookup name (i.e. magic name) = %s.",
+        //   lookup_name.c_str());
       } else {
-        RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-          "XML file has no lookup name (i.e. magic name) for class %s, "
-          "assuming lookup_name == real class name.",
-          derived_class.c_str());
+        // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+        //   "XML file has no lookup name (i.e. magic name) for class %s, "
+        //   "assuming lookup_name == real class name.",
+        //   derived_class.c_str());
         lookup_name = derived_class;
       }
 
@@ -782,7 +782,7 @@ template<class T>
 void ClassLoader<T>::refreshDeclaredClasses()
 /***************************************************************************/
 {
-  RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Refreshing declared classes.");
+  // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader", "Refreshing declared classes.");
   // determine classes not currently loaded for removal
   std::list<std::string> remove_classes;
   for (std::map<std::string, ClassDesc>::const_iterator it = classes_available_.begin();
@@ -832,9 +832,9 @@ int ClassLoader<T>::unloadLibraryForClass(const std::string & lookup_name)
   ClassMapIterator it = classes_available_.find(lookup_name);
   if (it != classes_available_.end() && it->second.resolved_library_path_ != "UNRESOLVED") {
     std::string library_path = it->second.resolved_library_path_;
-    RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
-      "Attempting to unload library %s for class %s",
-      library_path.c_str(), lookup_name.c_str());
+    // RCUTILS_LOG_DEBUG_NAMED("pluginlib.ClassLoader",
+    //   "Attempting to unload library %s for class %s",
+    //   library_path.c_str(), lookup_name.c_str());
     return unloadClassLibraryInternal(library_path);
   } else {
     throw pluginlib::LibraryUnloadException(getErrorStringForUnknownClass(lookup_name));
