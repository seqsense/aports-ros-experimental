diff --git a/test/testPython.py b/test/testPython.py
index 6e0dd72..b039c7b 100644
--- a/test/testPython.py
+++ b/test/testPython.py
@@ -58,24 +58,24 @@ class TestPython(unittest.TestCase):
         m.transform.rotation = geometry_msgs.msg.Quaternion(*tf.transformations.quaternion_from_euler(0, 0, 0))
         t.setTransform(m)
         afs = t.allFramesAsString()
-        self.assert_(len(afs) != 0)
-        self.assert_("PARENT" in afs)
-        self.assert_("THISFRAME" in afs)
+        self.assertTrue(len(afs) != 0)
+        self.assertTrue("PARENT" in afs)
+        self.assertTrue("THISFRAME" in afs)
 
         # Test getFrameStrings
         frames = t.getFrameStrings()
-        self.assert_("THISFRAME" in frames)
-        self.assert_("PARENT" not in frames)
+        self.assertTrue("THISFRAME" in frames)
+        self.assertTrue("PARENT" not in frames)
 
-        self.assert_(t.frameExists("THISFRAME"))
-        self.assert_(not t.frameExists("PARENT"))
+        self.assertTrue(t.frameExists("THISFRAME"))
+        self.assertTrue(not t.frameExists("PARENT"))
 
 
-        self.assert_(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == 0)
+        self.assertTrue(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == 0)
         for ti in [3, 5, 10, 11, 19, 20, 21]:
             m.header.stamp.secs = ti
             t.setTransform(m)
-            self.assert_(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == ti)
+            self.assertTrue(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == ti)
 
         # Verify that getLatestCommonTime with nonexistent frames raise exception
         self.assertRaises(tf.Exception, lambda: t.getLatestCommonTime("MANDALAY", "JUPITER"))
@@ -110,8 +110,8 @@ class TestPython(unittest.TestCase):
 
         chain = t.chain("A", rospy.Time(0), "C", rospy.Time(0), "B")
         print("Chain is {}".format(chain))
-        self.assert_("C" in chain)
-        self.assert_("B" in chain)
+        self.assertTrue("C" in chain)
+        self.assertTrue("B" in chain)
 
 
     def test_wait_for_transform(self):
@@ -158,16 +158,16 @@ class TestPython(unittest.TestCase):
             m.transform.rotation = geometry_msgs.msg.Quaternion(*tf.transformations.quaternion_from_euler(0, 0, 0))
             t.setTransform(m)
             afs = t.allFramesAsString()
-            self.assert_(len(afs) != 0)
-            self.assert_("PARENT" in afs)
-            self.assert_("THISFRAME" in afs)
-            self.assert_(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == 0)
+            self.assertTrue(len(afs) != 0)
+            self.assertTrue("PARENT" in afs)
+            self.assertTrue("THISFRAME" in afs)
+            self.assertTrue(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == 0)
 
             # Set transforms for time 0..100 inclusive
             for ti in range(101):
                 m.header.stamp = rospy.Time(ti)
                 t.setTransform(m)
-                self.assert_(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == ti)
+                self.assertTrue(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec() == ti)
             self.assertEqual(t.getLatestCommonTime("THISFRAME", "PARENT").to_sec(), 100)
 
             # (avoid time of 0 because that means 'latest')
@@ -182,9 +182,9 @@ class TestPython(unittest.TestCase):
             def extra(self):
               return 77
         t = TransformerSubclass(True, rospy.Duration.from_sec(10.0))
-        self.assert_(t.extra() == 77)
+        self.assertTrue(t.extra() == 77)
         self.common(t)
-        self.assert_(t.extra() == 77)
+        self.assertTrue(t.extra() == 77)
 
     def test_twist(self):
         t = tf.Transformer()
@@ -320,11 +320,11 @@ class TestPython(unittest.TestCase):
                     setT(t, str(p), str(n), rospy.Time(0), 1)
             for n in G.nodes():
                 ((x,_,_), _) = t.lookupTransform("0", str(n), rospy.Time(0))
-                self.assert_(x == nx.shortest_path_length(G, 0, n))
+                self.assertTrue(x == nx.shortest_path_length(G, 0, n))
             for i in G.nodes():
                 for j in G.nodes():
                     ((x,_,_), _) = t.lookupTransform(str(i), str(j), rospy.Time())
-                    self.assert_(abs(x) == abs(nx.shortest_path_length(G, 0, i) - nx.shortest_path_length(G, 0, j)))
+                    self.assertTrue(abs(x) == abs(nx.shortest_path_length(G, 0, i) - nx.shortest_path_length(G, 0, j)))
 
 
 if __name__ == '__main__':
diff --git a/test/test_datatype_conversion.py b/test/test_datatype_conversion.py
index 67e2114..1a30543 100755
--- a/test/test_datatype_conversion.py
+++ b/test/test_datatype_conversion.py
@@ -75,97 +75,97 @@ class PoseConversions(unittest.TestCase):
         
     # Test Pose conversions
     def test_msg_operator_equals_pose(self):
-        self.assertEquals(self.msgpose_stamped, self.msgpose_stamped, "pose msg test correctness")
+        self.assertEqual(self.msgpose_stamped, self.msgpose_stamped, "pose msg test correctness")
 
     def test_bt_operator_equals_pose(self):
-        self.assertEquals(self.tfpose_stamped, self.tfpose_stamped, "pose bt test correctness")
+        self.assertEqual(self.tfpose_stamped, self.tfpose_stamped, "pose bt test correctness")
 
     def test_msg_operator_on_converted(self):
-        self.assertEquals(tf.pose_stamped_bt_to_msg(self.tfpose_stamped), tf.pose_stamped_bt_to_msg(self.tfpose_stamped), "pose msg test correctness after conversion")
+        self.assertEqual(tf.pose_stamped_bt_to_msg(self.tfpose_stamped), tf.pose_stamped_bt_to_msg(self.tfpose_stamped), "pose msg test correctness after conversion")
 
     def test_bt_operator_on_converted(self):
-        self.assertEquals(tf.pose_stamped_msg_to_bt(self.msgpose_stamped), tf.pose_stamped_msg_to_bt(self.msgpose_stamped), "pose bt test correctness after conversion")
+        self.assertEqual(tf.pose_stamped_msg_to_bt(self.msgpose_stamped), tf.pose_stamped_msg_to_bt(self.msgpose_stamped), "pose bt test correctness after conversion")
 
     def test_to_msg_pose(self):
-        self.assertEquals(tf.pose_bt_to_msg(self.tfpose_stamped.pose), self.msgpose_stamped.pose, "pose tf to msg incorrect")
+        self.assertEqual(tf.pose_bt_to_msg(self.tfpose_stamped.pose), self.msgpose_stamped.pose, "pose tf to msg incorrect")
     def test_to_tf_pose(self):
-        self.assertEquals(tf.pose_msg_to_bt(self.msgpose_stamped.pose), self.tfpose_stamped.pose, "pose stamped msg to tf incorrect")
+        self.assertEqual(tf.pose_msg_to_bt(self.msgpose_stamped.pose), self.tfpose_stamped.pose, "pose stamped msg to tf incorrect")
 
     def test_stamped_to_msg_pose(self):
-        self.assertEquals(tf.pose_stamped_bt_to_msg(self.tfpose_stamped), self.msgpose_stamped, "pose stamped tf to msg incorrect")
+        self.assertEqual(tf.pose_stamped_bt_to_msg(self.tfpose_stamped), self.msgpose_stamped, "pose stamped tf to msg incorrect")
     def test_stamped_to_tf_pose(self):
-        self.assertEquals(tf.pose_stamped_msg_to_bt(self.msgpose_stamped), self.tfpose_stamped, "pose stamped msg to tf incorrect")
+        self.assertEqual(tf.pose_stamped_msg_to_bt(self.msgpose_stamped), self.tfpose_stamped, "pose stamped msg to tf incorrect")
         
 
         
     # Test Point conversions
     def test_bt_operator_equal_point(self):
-        self.assertEquals(self.tfpoint_stamped, self.tfpoint_stamped, "point tf test correctness")
+        self.assertEqual(self.tfpoint_stamped, self.tfpoint_stamped, "point tf test correctness")
 
     def test_msg_operator_equal_point(self):
-        self.assertEquals(self.msgpoint_stamped, self.msgpoint_stamped, "point msg test correctness")
+        self.assertEqual(self.msgpoint_stamped, self.msgpoint_stamped, "point msg test correctness")
 
     def test_msg_operator_equal_point_converted(self):
-        self.assertEquals(tf.point_stamped_bt_to_msg(self.tfpoint_stamped), tf.point_stamped_bt_to_msg(self.tfpoint_stamped), "point msg test correctness after conversion")
+        self.assertEqual(tf.point_stamped_bt_to_msg(self.tfpoint_stamped), tf.point_stamped_bt_to_msg(self.tfpoint_stamped), "point msg test correctness after conversion")
 
     def test_bt_operator_equal_point_converted(self):
-        self.assertEquals(tf.point_stamped_msg_to_bt(self.msgpoint_stamped), tf.point_stamped_msg_to_bt(self.msgpoint_stamped), "point bt test correctness after conversion")
+        self.assertEqual(tf.point_stamped_msg_to_bt(self.msgpoint_stamped), tf.point_stamped_msg_to_bt(self.msgpoint_stamped), "point bt test correctness after conversion")
 
     def test_to_msg_point(self):
-        self.assertEquals(tf.point_bt_to_msg(self.tfpoint_stamped.point), self.msgpoint_stamped.point, "point tf to msg incorrect")
+        self.assertEqual(tf.point_bt_to_msg(self.tfpoint_stamped.point), self.msgpoint_stamped.point, "point tf to msg incorrect")
     def test_to_tf_point(self):
-        self.assertEquals(tf.point_msg_to_bt(self.msgpoint_stamped.point), self.tfpoint_stamped.point, "point stamped msg to tf incorrect")
+        self.assertEqual(tf.point_msg_to_bt(self.msgpoint_stamped.point), self.tfpoint_stamped.point, "point stamped msg to tf incorrect")
 
     def test_stamped_to_msg_point(self):
-        self.assertEquals(tf.point_stamped_bt_to_msg(self.tfpoint_stamped), self.msgpoint_stamped, "point stamped tf to msg incorrect")
+        self.assertEqual(tf.point_stamped_bt_to_msg(self.tfpoint_stamped), self.msgpoint_stamped, "point stamped tf to msg incorrect")
     def test_stamped_to_tf_point(self):
-        self.assertEquals(tf.point_stamped_msg_to_bt(self.msgpoint_stamped), self.tfpoint_stamped, "point stamped msg to tf incorrect")
+        self.assertEqual(tf.point_stamped_msg_to_bt(self.msgpoint_stamped), self.tfpoint_stamped, "point stamped msg to tf incorrect")
         
     # Test Vector conversions
     def test_msg_operator_equal_vector(self):
-        self.assertEquals(self.tfvector_stamped, self.tfvector_stamped, "vector bt test correctness")
+        self.assertEqual(self.tfvector_stamped, self.tfvector_stamped, "vector bt test correctness")
 
     def test_msg_operator_equal_vector(self):
-        self.assertEquals(self.msgvector_stamped, self.msgvector_stamped, "vector msg test correctness")
+        self.assertEqual(self.msgvector_stamped, self.msgvector_stamped, "vector msg test correctness")
 
     def test_msg_operator_equal_vector_converted(self):
-        self.assertEquals(tf.vector_stamped_bt_to_msg(self.tfvector_stamped), tf.vector_stamped_bt_to_msg(self.tfvector_stamped), "vector msg test correctness after conversion")
+        self.assertEqual(tf.vector_stamped_bt_to_msg(self.tfvector_stamped), tf.vector_stamped_bt_to_msg(self.tfvector_stamped), "vector msg test correctness after conversion")
 
     def test_bt_operator_equal_vector_converted(self):
-        self.assertEquals(tf.vector_stamped_msg_to_bt(self.msgvector_stamped), tf.vector_stamped_msg_to_bt(self.msgvector_stamped), "vector bt test correctness after conversion")
+        self.assertEqual(tf.vector_stamped_msg_to_bt(self.msgvector_stamped), tf.vector_stamped_msg_to_bt(self.msgvector_stamped), "vector bt test correctness after conversion")
 
     def test_to_msg_vector(self):
-        self.assertEquals(tf.vector_bt_to_msg(self.tfvector_stamped.vector), self.msgvector_stamped.vector, "vector tf to msg incorrect")
+        self.assertEqual(tf.vector_bt_to_msg(self.tfvector_stamped.vector), self.msgvector_stamped.vector, "vector tf to msg incorrect")
     def test_to_tf_vector(self):
-        self.assertEquals(tf.vector_msg_to_bt(self.msgvector_stamped.vector), self.tfvector_stamped.vector, "vector stamped msg to tf incorrect")
+        self.assertEqual(tf.vector_msg_to_bt(self.msgvector_stamped.vector), self.tfvector_stamped.vector, "vector stamped msg to tf incorrect")
 
     def test_stamped_to_msg_vector(self):
-        self.assertEquals(tf.vector_stamped_bt_to_msg(self.tfvector_stamped), self.msgvector_stamped, "vector stamped tf to msg incorrect")
+        self.assertEqual(tf.vector_stamped_bt_to_msg(self.tfvector_stamped), self.msgvector_stamped, "vector stamped tf to msg incorrect")
     def test_stamped_to_tf_vector(self):
-        self.assertEquals(tf.vector_stamped_msg_to_bt(self.msgvector_stamped), self.tfvector_stamped, "vector stamped msg to tf incorrect")
+        self.assertEqual(tf.vector_stamped_msg_to_bt(self.msgvector_stamped), self.tfvector_stamped, "vector stamped msg to tf incorrect")
 
     # Test Quaternion conversions
     def test_bt_operator_equal_quaternion(self):
-        self.assertEquals(self.tfquaternion_stamped, self.tfquaternion_stamped, "quaternion bt test correctness")
+        self.assertEqual(self.tfquaternion_stamped, self.tfquaternion_stamped, "quaternion bt test correctness")
 
     def test_msg_operator_equal_quaternion(self):
-        self.assertEquals(self.msgquaternion_stamped, self.msgquaternion_stamped, "quaternion msg test correctness")
+        self.assertEqual(self.msgquaternion_stamped, self.msgquaternion_stamped, "quaternion msg test correctness")
 
     def test_msg_operator_equal_quaternion_converted(self):
-        self.assertEquals(tf.quaternion_stamped_bt_to_msg(self.tfquaternion_stamped), tf.quaternion_stamped_bt_to_msg(self.tfquaternion_stamped), "quaternion msg test correctness after conversion")
+        self.assertEqual(tf.quaternion_stamped_bt_to_msg(self.tfquaternion_stamped), tf.quaternion_stamped_bt_to_msg(self.tfquaternion_stamped), "quaternion msg test correctness after conversion")
 
     def test_bt_operator_equal_quaternion_converted(self):
-        self.assertEquals(tf.quaternion_stamped_msg_to_bt(self.msgquaternion_stamped), tf.quaternion_stamped_msg_to_bt(self.msgquaternion_stamped), "quaternion bt test correctness after conversion")
+        self.assertEqual(tf.quaternion_stamped_msg_to_bt(self.msgquaternion_stamped), tf.quaternion_stamped_msg_to_bt(self.msgquaternion_stamped), "quaternion bt test correctness after conversion")
 
     def test_to_msg_quaternion(self):
-        self.assertEquals(tf.quaternion_bt_to_msg(self.tfquaternion_stamped.quaternion), self.msgquaternion_stamped.quaternion, "quaternion tf to msg incorrect")
+        self.assertEqual(tf.quaternion_bt_to_msg(self.tfquaternion_stamped.quaternion), self.msgquaternion_stamped.quaternion, "quaternion tf to msg incorrect")
     def test_to_tf_quaternion(self):
-        self.assertEquals(tf.quaternion_msg_to_bt(self.msgquaternion_stamped.quaternion), self.tfquaternion_stamped.quaternion, "quaternion stamped msg to tf incorrect")
+        self.assertEqual(tf.quaternion_msg_to_bt(self.msgquaternion_stamped.quaternion), self.tfquaternion_stamped.quaternion, "quaternion stamped msg to tf incorrect")
 
     def test_stamped_to_msg_quaternion(self):
-        self.assertEquals(tf.quaternion_stamped_bt_to_msg(self.tfquaternion_stamped), self.msgquaternion_stamped, "quaternion stamped tf to msg incorrect")
+        self.assertEqual(tf.quaternion_stamped_bt_to_msg(self.tfquaternion_stamped), self.msgquaternion_stamped, "quaternion stamped tf to msg incorrect")
     def test_stamped_to_tf_quaternion(self):
-        self.assertEquals(tf.quaternion_stamped_msg_to_bt(self.msgquaternion_stamped), self.tfquaternion_stamped, "quaternion stamped msg to tf incorrect")
+        self.assertEqual(tf.quaternion_stamped_msg_to_bt(self.msgquaternion_stamped), self.tfquaternion_stamped, "quaternion stamped msg to tf incorrect")
 if __name__ == '__main__':
     import rostest
     rostest.unitrun('tf', 'test_tf_data_conversions', PoseConversions)
