diff --git a/nodes/hztest b/nodes/hztest
index 88546a4a4..6d0025c01 100755
--- a/nodes/hztest
+++ b/nodes/hztest
@@ -117,10 +117,10 @@ Test Duration: %s"""%(hz, hzerror, topic, test_duration))
         self._test_hz(hz, hzerror, topic, test_duration, wait_time)        
             
     def _test_hz(self, hz, hzerror, topic, test_duration, wait_time): 
-        self.assert_(hz >= 0.0, "bad parameter (hz)")
-        self.assert_(hzerror >= 0.0, "bad parameter (hzerror)")
-        self.assert_(test_duration > 0.0, "bad parameter (test_duration)")
-        self.assert_(len(topic), "bad parameter (topic)")
+        self.assertTrue(hz >= 0.0, "bad parameter (hz)")
+        self.assertTrue(hzerror >= 0.0, "bad parameter (hzerror)")
+        self.assertTrue(test_duration > 0.0, "bad parameter (test_duration)")
+        self.assertTrue(len(topic), "bad parameter (topic)")
 
         if hz == 0:
             self.min_rate = 0.0
@@ -138,7 +138,7 @@ Test Duration: %s"""%(hz, hzerror, topic, test_duration))
 
         # Start actual test
         sub = rospy.Subscriber(topic, rospy.AnyMsg, self.callback)
-        self.assert_(not self.errors, "bad initialization state (errors)")
+        self.assertTrue(not self.errors, "bad initialization state (errors)")
         
         print("Waiting for messages")
         # we have to wait until the first message is received before measuring the rate
@@ -149,9 +149,9 @@ Test Duration: %s"""%(hz, hzerror, topic, test_duration))
         while not self.message_received and time.time() < wallclock_timeout_t:
             time.sleep(0.1)
         if hz > 0.:
-            self.assert_(self.message_received, "no messages before timeout")
+            self.assertTrue(self.message_received, "no messages before timeout")
         else:
-            self.failIf(self.message_received, "message received")
+            self.assertFalse(self.message_received, "message received")
             
         print("Starting rate measurement")
         if self.wall_clock:
@@ -167,25 +167,25 @@ Test Duration: %s"""%(hz, hzerror, topic, test_duration))
 
         # Check that we got at least one message
         if hz > 0:
-            self.assert_(self.msg_count > 0, "no messages received")
+            self.assertTrue(self.msg_count > 0, "no messages received")
         else:
-            self.assertEquals(0, self.msg_count)
+            self.assertEqual(0, self.msg_count)
         # Check whether inter-message intervals were violated (if we were
         # checking them)
-        self.assert_(not self.errors, '\n'.join(self.errors))
+        self.assertTrue(not self.errors, '\n'.join(self.errors))
 
         # If we have a non-zero rate target, make sure that we hit it on
         # average
         if hz > 0.0:
-          self.assert_(self.msg_t0 >= 0.0, "no first message received")
-          self.assert_(self.msg_tn >= 0.0, "no last message received")
+          self.assertTrue(self.msg_t0 >= 0.0, "no first message received")
+          self.assertTrue(self.msg_tn >= 0.0, "no last message received")
           dt = self.msg_tn - self.msg_t0
-          self.assert_(dt > 0.0, "only one message received")
+          self.assertTrue(dt > 0.0, "only one message received")
           rate = ( self.msg_count - 1) / dt
-          self.assert_(rate >= self.min_rate, 
+          self.assertTrue(rate >= self.min_rate, 
                        "average rate (%.3fHz) exceeded minimum (%.3fHz)" %
                        (rate, self.min_rate))
-          self.assert_(rate <= self.max_rate, 
+          self.assertTrue(rate <= self.max_rate, 
                        "average rate (%.3fHz) exceeded maximum (%.3fHz)" %
                        (rate, self.max_rate))
         
diff --git a/nodes/paramtest b/nodes/paramtest
index 4557d5f26..90a3a8cee 100755
--- a/nodes/paramtest
+++ b/nodes/paramtest
@@ -83,8 +83,8 @@ class ParamTest(unittest.TestCase):
         self._test_param(testattr_paramname_target, testattr_duration, wait_time, paramvalue_expected)
 
     def _test_param(self, testattr_paramname_target, testattr_duration, wait_time, paramvalue_expected=None):
-        self.assert_(testattr_duration > 0.0, "bad parameter (test_duration)")
-        self.assert_(len(testattr_paramname_target), "bad parameter (testattr_paramname_target)")
+        self.assertTrue(testattr_duration > 0.0, "bad parameter (test_duration)")
+        self.assertTrue(len(testattr_paramname_target), "bad parameter (testattr_paramname_target)")
 
         print("Waiting for parameters")
 
diff --git a/src/rostest/runner.py b/src/rostest/runner.py
index 0cb931625..8159faa37 100644
--- a/src/rostest/runner.py
+++ b/src/rostest/runner.py
@@ -110,7 +110,7 @@ def rostestRunner(test, test_pkg, results_base_dir=None):
     def fn(self):
         done = False
         while not done:
-            self.assert_(self.test_parent is not None, "ROSTestParent initialization failed")
+            self.assertTrue(self.test_parent is not None, "ROSTestParent initialization failed")
 
             test_name = test.test_name
 
@@ -118,7 +118,7 @@ def rostestRunner(test, test_pkg, results_base_dir=None):
 
             #launch the other nodes
             succeeded, failed = self.test_parent.launch()
-            self.assert_(not failed, "Test Fixture Nodes %s failed to launch"%failed)
+            self.assertTrue(not failed, "Test Fixture Nodes %s failed to launch"%failed)
 
             #setup the test
             # - we pass in the output test_file name so we can scrape it
@@ -161,7 +161,7 @@ def rostestRunner(test, test_pkg, results_base_dir=None):
             if not _textMode or timeout_failure:
                 
                 if not timeout_failure:
-                    self.assert_(os.path.isfile(test_file), "test [%s] did not generate test results"%test_name)
+                    self.assertTrue(os.path.isfile(test_file), "test [%s] did not generate test results"%test_name)
                     printlog("test [%s] results are in [%s]", test_name, test_file)
                     results = rosunit.junitxml.read(test_file, test_name)
                     test_fail = results.num_errors or results.num_failures
@@ -179,8 +179,8 @@ def rostestRunner(test, test_pkg, results_base_dir=None):
                     printlog("test [%s] results summary: %s errors, %s failures, %s tests",
                              test_name, results.num_errors, results.num_failures, results.num_tests)
 
-                    #self.assertEquals(0, results.num_errors, "unit test reported errors")
-                    #self.assertEquals(0, results.num_failures, "unit test reported failures")
+                    #self.assertEqual(0, results.num_errors, "unit test reported errors")
+                    #self.assertEqual(0, results.num_failures, "unit test reported failures")
             else:
                 if test.retry:
                     printlogerr("retry is disabled in --text mode")
diff --git a/test/test_clean_master.py b/test/test_clean_master.py
index 039316ffb..9420254e2 100755
--- a/test/test_clean_master.py
+++ b/test/test_clean_master.py
@@ -41,7 +41,7 @@ import rosunit
 class CleanMasterTest(unittest.TestCase):
   
     def test_clean_master(self):
-        self.failIf(rospy.has_param('dirty'))
+        self.assertFalse(rospy.has_param('dirty'))
         rospy.set_param('dirty', True)
 
 if __name__ == '__main__':
diff --git a/test/test_distro_version.py b/test/test_distro_version.py
index 43d2cbccb..d228262a6 100755
--- a/test/test_distro_version.py
+++ b/test/test_distro_version.py
@@ -44,7 +44,7 @@ class VersionTest(unittest.TestCase):
     def test_distro_version(self):
         val = (subprocess.Popen(['rosversion', '-d'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0] or b'').decode().strip()
         param = rospy.get_param('rosdistro').strip()
-        self.assertEquals(val, param, "rosversion -d [%s] and roscore [%s] do not match"%(val, param))
+        self.assertEqual(val, param, "rosversion -d [%s] and roscore [%s] do not match"%(val, param))
 
 if __name__ == '__main__':
     rostest.unitrun('test_rostest', 'test_distro_version', VersionTest, coverage_packages=[])
