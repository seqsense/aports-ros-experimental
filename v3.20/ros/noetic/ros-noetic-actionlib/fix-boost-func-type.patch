diff --git a/include/actionlib/server/simple_action_server.h b/include/actionlib/server/simple_action_server.h
index 43e8248..55f2fa0 100644
--- a/include/actionlib/server/simple_action_server.h
+++ b/include/actionlib/server/simple_action_server.h
@@ -90,7 +90,7 @@ public:
    *                         a new goal is received, allowing users to have blocking callbacks.
    *                         Adding an execute callback also deactivates the goalCallback.
    */
-  ROS_DEPRECATED SimpleActionServer(std::string name, ExecuteCallback execute_callback = NULL);
+  ROS_DEPRECATED SimpleActionServer(std::string name, ExecuteCallback execute_callback = 0);
 
   /**
    * @brief  Constructor for a SimpleActionServer
@@ -121,7 +121,7 @@ public:
    *                         Adding an execute callback also deactivates the goalCallback.
    */
   ROS_DEPRECATED SimpleActionServer(ros::NodeHandle n, std::string name,
-    ExecuteCallback execute_callback = NULL);
+    ExecuteCallback execute_callback = 0);
 
   ~SimpleActionServer();
 
diff --git a/include/actionlib/server/simple_action_server_imp.h b/include/actionlib/server/simple_action_server_imp.h
index 0255515..52ea6d9 100644
--- a/include/actionlib/server/simple_action_server_imp.h
+++ b/include/actionlib/server/simple_action_server_imp.h
@@ -64,7 +64,7 @@ SimpleActionServer<ActionSpec>::SimpleActionServer(std::string name,
 template<class ActionSpec>
 SimpleActionServer<ActionSpec>::SimpleActionServer(std::string name, bool auto_start)
 : new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false), execute_callback_(
-    NULL), execute_thread_(nullptr), need_to_terminate_(false)
+    0), execute_thread_(nullptr), need_to_terminate_(false)
 {
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n_, name,
@@ -117,7 +117,7 @@ template<class ActionSpec>
 SimpleActionServer<ActionSpec>::SimpleActionServer(ros::NodeHandle n, std::string name,
   bool auto_start)
 : n_(n), new_goal_(false), preempt_request_(false), new_goal_preempt_request_(false),
-  execute_callback_(NULL), execute_thread_(nullptr), need_to_terminate_(false)
+  execute_callback_(0), execute_thread_(nullptr), need_to_terminate_(false)
 {
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
