diff --git a/test/args.py b/test/args.py
index eaa1d70ba..387d81ab0 100644
--- a/test/args.py
+++ b/test/args.py
@@ -47,26 +47,26 @@ class TopicToolsTestCase(unittest.TestCase):
 
     def test_drop_invalid(self):
         cmd = [rosrun_script, 'topic_tools', 'drop']
-        self.assertNotEquals(0, call(cmd))
-        self.assertNotEquals(0, call(cmd + ['//', '1', '2', 'output']))
-        self.assertNotEquals(0, call(cmd + ['input', '1', '2', 'output', 'extra']))
-        self.assertNotEquals(0, call(cmd + ['input', '-1', '2', 'output']))
-        self.assertNotEquals(0, call(cmd + ['input', '1', '0', 'output']))
+        self.assertNotEqual(0, call(cmd))
+        self.assertNotEqual(0, call(cmd + ['//', '1', '2', 'output']))
+        self.assertNotEqual(0, call(cmd + ['input', '1', '2', 'output', 'extra']))
+        self.assertNotEqual(0, call(cmd + ['input', '-1', '2', 'output']))
+        self.assertNotEqual(0, call(cmd + ['input', '1', '0', 'output']))
 
     def test_mux_invalid(self):
         cmd = [rosrun_script, 'topic_tools', 'mux']
-        self.assertNotEquals(0, call(cmd))
-        self.assertNotEquals(0, call(cmd + ['//', 'input']))
+        self.assertNotEqual(0, call(cmd))
+        self.assertNotEqual(0, call(cmd + ['//', 'input']))
 
     def test_switch_mux_invalid(self):
         cmd = [rosrun_script, 'topic_tools', 'switch_mux']
-        self.assertNotEquals(0, call(cmd))
-        self.assertNotEquals(0, call(cmd + ['//', 'input']))
+        self.assertNotEqual(0, call(cmd))
+        self.assertNotEqual(0, call(cmd + ['//', 'input']))
 
     def test_relay_invalid(self):
         cmd = [rosrun_script, 'topic_tools', 'relay']
-        self.assertNotEquals(0, call(cmd))
-        self.assertNotEquals(0, call(cmd + ['//', 'input']))
+        self.assertNotEqual(0, call(cmd))
+        self.assertNotEqual(0, call(cmd + ['//', 'input']))
 
 if __name__ == "__main__":
     import rostest
diff --git a/test/test_mux_services.py b/test/test_mux_services.py
index 1bd45ec07..503cc0e6d 100755
--- a/test/test_mux_services.py
+++ b/test/test_mux_services.py
@@ -65,11 +65,11 @@ class MuxServiceTestCase(unittest.TestCase):
         add_srv, delete_srv, list_srv, select_srv = self.make_srv_proxies()
         # Check initial condition
         topics = list_srv().topics
-        self.assertEquals(set(topics), set(['/input']))
+        self.assertEqual(set(topics), set(['/input']))
         # Add a topic and make sure it's there
         add_srv('/new_input')
         topics = list_srv().topics
-        self.assertEquals(set(topics), set(['/input', '/new_input']))
+        self.assertEqual(set(topics), set(['/input', '/new_input']))
         # Try to add the same topic again, make sure it fails, and that
         # nothing changes.
         try:
@@ -79,7 +79,7 @@ class MuxServiceTestCase(unittest.TestCase):
         else:
             self.fail('service call should have thrown an exception')
         topics = list_srv().topics
-        self.assertEquals(set(topics), set(['/input', '/new_input']))
+        self.assertEqual(set(topics), set(['/input', '/new_input']))
         # Select a topic, then try to delete it, make sure it fails, and
         # that nothing changes.
         select_srv('/input')
@@ -90,16 +90,16 @@ class MuxServiceTestCase(unittest.TestCase):
         else:
             self.fail('service call should have thrown an exception')
         topics = list_srv().topics
-        self.assertEquals(set(topics), set(['/input', '/new_input']))
+        self.assertEqual(set(topics), set(['/input', '/new_input']))
         # Select nothing, to allow deletion
         select_srv('__none')
         # Delete topics
         delete_srv('/input')
         topics = list_srv().topics
-        self.assertEquals(set(topics), set(['/new_input']))
+        self.assertEqual(set(topics), set(['/new_input']))
         delete_srv('/new_input')
         topics = list_srv().topics
-        self.assertEquals(set(topics), set([]))
+        self.assertEqual(set(topics), set([]))
 
 if __name__ == "__main__":
     import rostest
