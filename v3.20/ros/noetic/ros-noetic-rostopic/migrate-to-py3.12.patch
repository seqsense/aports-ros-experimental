diff --git a/test/check_rostopic_command_line_online.py b/test/check_rostopic_command_line_online.py
index 2ec6fcd7f..c14c96235 100755
--- a/test/check_rostopic_command_line_online.py
+++ b/test/check_rostopic_command_line_online.py
@@ -84,23 +84,23 @@ class TestRostopicOnline(unittest.TestCase):
         output = output.decode()
         l = set(output.split())
         for t in topics:
-            self.assert_(t in l)
+            self.assertTrue(t in l)
 
         for name in names:
             # type
             output = Popen([cmd, 'type', name], stdout=PIPE).communicate()[0]
             output = output.decode()
-            self.assertEquals('std_msgs/String', output.strip())
+            self.assertEqual('std_msgs/String', output.strip())
             # check type of topic field
             output = Popen([cmd, 'type', name + '/data'], stdout=PIPE).communicate()[0]
             output = output.decode()
-            self.assertEquals('std_msgs/String data string', output.strip())
+            self.assertEqual('std_msgs/String data string', output.strip())
 
             # find
             output = Popen([cmd, 'find', 'std_msgs/String'], stdout=PIPE).communicate()[0]
             output = output.decode()
             values = [n.strip() for n in output.split('\n') if n.strip()]
-            self.assertEquals(set(values), set(topics))
+            self.assertEqual(set(values), set(topics))
 
             #echo
             # test with -c option to get command to terminate
@@ -109,22 +109,22 @@ class TestRostopicOnline(unittest.TestCase):
             output = output.decode()
             values = [n.strip() for n in output.split('\n') if n.strip()]
             values = [n for n in values if n != '---']
-            self.assertEquals(count, len(values), "wrong number of echos in output:\n"+str(values))
+            self.assertEqual(count, len(values), "wrong number of echos in output:\n"+str(values))
             for n in values:
-                self.assert_('data: "hello world ' in n, n)
+                self.assertTrue('data: "hello world ' in n, n)
 
             if 0:
                 #bw
                 stdout, stderr = run_for([cmd, 'bw', name], 3.)
-                self.assert_('average:' in stdout, "OUTPUT: %s\n%s"%(stdout,stderr))
+                self.assertTrue('average:' in stdout, "OUTPUT: %s\n%s"%(stdout,stderr))
 
                 # hz
                 stdout, stderr = run_for([cmd, 'hz', name], 2.)
-                self.assert_('average rate:' in stdout)
+                self.assertTrue('average rate:' in stdout)
 
                 # delay
                 stdout, stderr = run_for([cmd, 'delay', name], 2.)
-                self.assert_('average rate:' in stdout)
+                self.assertTrue('average rate:' in stdout)
             
         # pub
         #  - pub wait until ctrl-C, so we have to wait then kill it
@@ -145,7 +145,7 @@ class TestRostopicOnline(unittest.TestCase):
                 time.sleep(0.1)
             # - check published value
             msg = self.msgs[key]
-            self.assertEquals(s, msg.data)
+            self.assertEqual(s, msg.data)
             
             os.kill(popen.pid, signal.SIGKILL)
 
@@ -168,7 +168,7 @@ class TestRostopicOnline(unittest.TestCase):
                 msg = self.msgs[key]
             except KeyError:
                 self.fail("no message received on "+str(key))
-            self.assertEquals(s, msg.data)
+            self.assertEqual(s, msg.data)
             
             os.kill(popen.pid, signal.SIGKILL)
             
diff --git a/test/test_rostopic.py b/test/test_rostopic.py
index 33da321cd..f22c278ee 100644
--- a/test/test_rostopic.py
+++ b/test/test_rostopic.py
@@ -124,17 +124,17 @@ class TestRostopic(unittest.TestCase):
             rostopic.rostopicmain([cmd, 'type', 'fake'])
             self.fail("should have exited")
         except SystemExit as e:
-            self.assertNotEquals(0, e.code)
+            self.assertNotEqual(0, e.code)
                 
         for s in ['/chatter', 'chatter', 'foo/chatter', '/bar/chatter']:
             with fakestdout() as b:
                 rostopic.rostopicmain([cmd, 'type', s])
                 v = b.getvalue().strip()
-                self.assertEquals('std_msgs/String', v)
+                self.assertEqual('std_msgs/String', v)
                 # check type of topic field
                 rostopic.rostopicmain([cmd, 'type', s + '/data'])
                 v = b.getvalue().strip()
-                self.assertEquals('std_msgs/String data string', v)
+                self.assertEqual('std_msgs/String data string', v)
 
     def test_main(self):
         import rostopic
@@ -143,12 +143,12 @@ class TestRostopic(unittest.TestCase):
             rostopic.rostopicmain([c])
             self.fail("should have exited with error")
         except SystemExit as e:
-            self.assertNotEquals(0, e.code)
+            self.assertNotEqual(0, e.code)
         try:
             rostopic.rostopicmain([c, 'foo'])
             self.fail("should have exited with error")
         except SystemExit as e:
-            self.assertNotEquals(0, e.code)
+            self.assertNotEqual(0, e.code)
         
     def test_cmd_pub(self):
         import rostopic
@@ -170,7 +170,7 @@ class TestRostopic(unittest.TestCase):
                 rostopic.rostopicmain([cmd, 'pub'] + i)
                 self.fail("should have exited with error"+str(i))
             except SystemExit as e:
-                self.assert_(e.code != 0)
+                self.assertTrue(e.code != 0)
         
 
                 
@@ -184,36 +184,36 @@ class TestRostopic(unittest.TestCase):
     def test_get_topic_type(self):
         import rostopic
         
-        self.assertEquals((None, None, None), rostopic.get_topic_type('/fake', blocking=False))
+        self.assertEqual((None, None, None), rostopic.get_topic_type('/fake', blocking=False))
         
         t, n, f = rostopic.get_topic_type('/rosout', blocking=False)
-        self.assertEquals('rosgraph_msgs/Log', t)
-        self.assertEquals('/rosout', n)
-        self.assert_(f is None)
+        self.assertEqual('rosgraph_msgs/Log', t)
+        self.assertEqual('/rosout', n)
+        self.assertTrue(f is None)
 
         t, n, f = rostopic.get_topic_type('/rosout/name', blocking=False)
-        self.assertEquals('rosgraph_msgs/Log', t)
-        self.assertEquals('/rosout', n)
-        self.failIf(f is None)
+        self.assertEqual('rosgraph_msgs/Log', t)
+        self.assertEqual('/rosout', n)
+        self.assertFalse(f is None)
         from rosgraph_msgs.msg import Log
-        self.assertEquals("bob", f(Log(name="bob")))
+        self.assertEqual("bob", f(Log(name="bob")))
         
     def test_get_topic_class(self):
         import rostopic
         
-        self.assertEquals((None, None, None), rostopic.get_topic_class('/fake'))
+        self.assertEqual((None, None, None), rostopic.get_topic_class('/fake'))
 
         from rosgraph_msgs.msg import Log
         c, n, f = rostopic.get_topic_class('/rosout')
-        self.assertEquals(Log, c)
-        self.assertEquals('/rosout', n)
-        self.assert_(f is None)
+        self.assertEqual(Log, c)
+        self.assertEqual('/rosout', n)
+        self.assertTrue(f is None)
 
         c, n, f = rostopic.get_topic_class('/rosout/name')
-        self.assertEquals(c, Log)
-        self.assertEquals('/rosout', n)
-        self.failIf(f is None)
-        self.assertEquals("bob", f(Log(name="bob")))
+        self.assertEqual(c, Log)
+        self.assertEqual('/rosout', n)
+        self.assertFalse(f is None)
+        self.assertEqual("bob", f(Log(name="bob")))
         
     def test_cmd_info(self):
         import rostopic
@@ -236,12 +236,12 @@ class TestRostopic(unittest.TestCase):
             rostopic.rostopicmain([cmd, 'info', 'rosout'])
             v = b.getvalue()
             for s in ["Publishers:", "Subscribers", "Type: rosgraph_msgs/Log", " * /rosout"]:
-                self.assert_(s in v, "failed on %s: %s"%(s, v))
+                self.assertTrue(s in v, "failed on %s: %s"%(s, v))
         with fakestdout() as b:            
             rostopic.rostopicmain([cmd, 'info', '/chatter'])
             v = b.getvalue()
             for s in ["Publishers:", "Subscribers", "Type: std_msgs/String", " * /talker"]:
-                self.assert_(s in v, "failed on %s: %s"%(s, v))
+                self.assertTrue(s in v, "failed on %s: %s"%(s, v))
 
     def test_cmd_find(self):
         import rostopic
@@ -261,7 +261,7 @@ class TestRostopic(unittest.TestCase):
             rostopic.rostopicmain([cmd, 'find', 'std_msgs/String'])
             d = [x for x in b.getvalue().split('\n') if x.strip()]
             v = ['/foo/chatter', '/bar/chatter', '/chatter']
-            self.assertEquals(set(v), set(d))
+            self.assertEqual(set(v), set(d))
 
     def callback(self, msg, val):
         self.vals.add(val)
@@ -287,48 +287,48 @@ class TestRostopic(unittest.TestCase):
         with fakestdout() as b:
             rostopic.rostopicmain([cmd, 'list'])
             v = [x.strip() for x in b.getvalue().split('\n') if x.strip()]
-            self.failIf(set(topics)-set(v))
+            self.assertFalse(set(topics)-set(v))
 
         # test through public function
         topics = ['/chatter', '/foo/chatter', '/bar/chatter', '/rosout', '/rosout_agg'] 
 
         v = rostopic.get_topic_list()
-        self.failIf(set(topics)-set(v))
+        self.assertFalse(set(topics)-set(v))
 
         # publishers-only
         topics = ['/chatter', '/foo/chatter', '/bar/chatter', '/rosout', '/rosout_agg'] 
         with fakestdout() as b:
             rostopic.rostopicmain([cmd, 'list', '-p'])
             v = [x.strip() for x in b.getvalue().split('\n') if x.strip()]
-            self.failIf(set(topics)-set(v))
-            self.failIf('/clock' in v)
+            self.assertFalse(set(topics)-set(v))
+            self.assertFalse('/clock' in v)
             
         # subscribers-only
         topics = ['/rosout'] 
         with fakestdout() as b:
             rostopic.rostopicmain([cmd, 'list', '-s'])
             v = [x.strip() for x in b.getvalue().split('\n') if x.strip()]
-            self.failIf(set(topics)-set(v), "%s vs. %s"%(topics, v))
-            self.failIf('/chatter' in v)
+            self.assertFalse(set(topics)-set(v), "%s vs. %s"%(topics, v))
+            self.assertFalse('/chatter' in v)
 
         # turn on verbosity, not checking output as it's not as stable
         with fakestdout() as b:            
             rostopic.rostopicmain([cmd, 'list', '-v'])
             v = b.getvalue()
-            self.assert_("Published topics:" in v)
-            self.assert_("Subscribed topics:" in v)
+            self.assertTrue("Published topics:" in v)
+            self.assertTrue("Subscribed topics:" in v)
             
         with fakestdout() as b:            
             rostopic.rostopicmain([cmd, 'list', '-vs'])
             v = b.getvalue()
-            self.failIf("Published topics:" in v)        
-            self.assert_("Subscribed topics:" in v)
+            self.assertFalse("Published topics:" in v)        
+            self.assertTrue("Subscribed topics:" in v)
 
         with fakestdout() as b:            
             rostopic.rostopicmain([cmd, 'list', '-vp'])
             v = b.getvalue()
-            self.assert_("Published topics:" in v)        
-            self.failIf("Subscribed topics:" in v)
+            self.assertTrue("Published topics:" in v)        
+            self.assertFalse("Subscribed topics:" in v)
             
         # test with multiple topic names
         try:
@@ -341,20 +341,20 @@ class TestRostopic(unittest.TestCase):
         for n in topics:
             with fakestdout() as b:
                 rostopic.rostopicmain([cmd, 'list', n])
-                self.assertEquals(n, b.getvalue().strip())
+                self.assertEqual(n, b.getvalue().strip())
 
         # test with relative names
         with fakestdout() as b:
             rostopic.rostopicmain([cmd, 'list', 'rosout'])
-            self.assertEquals('/rosout', b.getvalue().strip())
+            self.assertEqual('/rosout', b.getvalue().strip())
             
         # test with namespaces
         with fakestdout() as b:        
             rostopic.rostopicmain([cmd, 'list', '/foo'])
-            self.assertEquals('/foo/chatter', b.getvalue().strip())
+            self.assertEqual('/foo/chatter', b.getvalue().strip())
         with fakestdout() as b:        
             rostopic.rostopicmain([cmd, 'list', 'bar'])
-            self.assertEquals('/bar/chatter', b.getvalue().strip())
+            self.assertEqual('/bar/chatter', b.getvalue().strip())
 
 NAME = 'test_rostopic'
 if __name__ == '__main__':
diff --git a/test/test_rostopic_command_line_offline.py b/test/test_rostopic_command_line_offline.py
index 551890d43..d0b4837de 100644
--- a/test/test_rostopic_command_line_offline.py
+++ b/test/test_rostopic_command_line_offline.py
@@ -49,26 +49,26 @@ class TestRostopicOffline(unittest.TestCase):
 
         sub = ['bw', 'echo', 'hz', 'delay', 'info', 'list', 'pub', 'type','find']
         output = Popen([cmd], stdout=PIPE).communicate()[0].decode()
-        self.assert_('Commands' in output)
+        self.assertTrue('Commands' in output)
         output = Popen([cmd, '-h'], stdout=PIPE).communicate()[0].decode()
-        self.assert_('Commands' in output)
+        self.assertTrue('Commands' in output)
         # make sure all the commands are in the usage
         for c in sub:
             cmd_sub = "%s %s"%(cmd, c)
-            self.assert_(cmd_sub in output, "'%s' is not in help: \n%s"%(cmd_sub, output))
+            self.assertTrue(cmd_sub in output, "'%s' is not in help: \n%s"%(cmd_sub, output))
 
         for c in sub:
             output = Popen([cmd, c, '-h'], stdout=PIPE, stderr=PIPE).communicate()
-            self.assert_("usage:" in output[0].decode().lower(), output)
+            self.assertTrue("usage:" in output[0].decode().lower(), output)
             # make sure usage refers to the command
-            self.assert_("%s %s"%(cmd, c) in output[0].decode(), output)
+            self.assertTrue("%s %s"%(cmd, c) in output[0].decode(), output)
             
         # test no args on commands that require args
         for c in ['bw', 'echo', 'hz', 'delay', 'info', 'pub', 'type', 'find']:
             output = Popen([cmd, c], stdout=PIPE, stderr=PIPE).communicate()
-            self.assert_("usage:" in output[0].decode().lower() or "usage:" in output[1].decode().lower(), output)
+            self.assertTrue("usage:" in output[0].decode().lower() or "usage:" in output[1].decode().lower(), output)
             # make sure usage refers to the command
-            self.assert_("%s %s"%(cmd, c) in output[1].decode(), output)
+            self.assertTrue("%s %s"%(cmd, c) in output[1].decode(), output)
             
     def test_offline(self):
         cmd = 'rostopic'
@@ -81,18 +81,18 @@ class TestRostopicOffline(unittest.TestCase):
         msg = "ERROR: Unable to communicate with master!" + os.linesep
 
         output = Popen([cmd, 'bw', 'chatter'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
         output = Popen([cmd, 'echo', 'chatter'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
         output = Popen([cmd, 'hz', 'chatter'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
         output = Popen([cmd, 'delay', 'chatter'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
         output = Popen([cmd, 'list'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
         output = Popen([cmd, 'pub', 'chatter', 'std_msgs/String', 'hello'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
         output = Popen([cmd, 'type', 'chatter'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
         output = Popen([cmd, 'type', 'std_msgs/String'], **kwds).communicate()[1].decode()
-        self.assert_(output.endswith(msg))
+        self.assertTrue(output.endswith(msg))
