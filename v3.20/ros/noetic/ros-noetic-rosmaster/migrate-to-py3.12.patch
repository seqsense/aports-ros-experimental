diff --git a/test/test_rosmaster_paramserver.py b/test/test_rosmaster_paramserver.py
index 2b502cbad..aff28dea6 100644
--- a/test/test_rosmaster_paramserver.py
+++ b/test/test_rosmaster_paramserver.py
@@ -89,9 +89,9 @@ class TestRospyParamServer(unittest.TestCase):
             param_val = args[2]
 
             val = compute_param_updates(reg, param_key, param_val)
-            self.assertEquals(len(correct), len(val), "Failed: \n%s \nreturned \n%s\nvs correct\n%s"%(str(args), str(val), str(correct)))
+            self.assertEqual(len(correct), len(val), "Failed: \n%s \nreturned \n%s\nvs correct\n%s"%(str(args), str(val), str(correct)))
             for c in correct:
-                self.assert_(c in val, "Failed: \n%s \ndid not include \n%s. \nIt returned \n%s"%(str(args), c, val))
+                self.assertTrue(c in val, "Failed: \n%s \ndid not include \n%s. \nIt returned \n%s"%(str(args), c, val))
 
 
     def notify_task(self, updates):
@@ -107,31 +107,31 @@ class TestRospyParamServer(unittest.TestCase):
 
         # subscribe to parameter that has not been set yet
         self.last_update = None
-        self.assertEquals({}, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
+        self.assertEqual({}, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
         param_server.set_param('/foo', 1, notify_task=self.notify_task)
-        self.assertEquals([([('node1', 'http://node1:1')], '/foo/', 1), ], self.last_update)
+        self.assertEqual([([('node1', 'http://node1:1')], '/foo/', 1), ], self.last_update)
         
         # resubscribe
-        self.assertEquals(1, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
+        self.assertEqual(1, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
         param_server.set_param('/foo', 2, notify_task=self.notify_task)
-        self.assertEquals([([('node1', 'http://node1:1')], '/foo/', 2), ], self.last_update)
+        self.assertEqual([([('node1', 'http://node1:1')], '/foo/', 2), ], self.last_update)
 
         # resubscribe (test canonicalization of parameter name)
-        self.assertEquals(2, param_server.subscribe_param('/foo/', ('node1', 'http://node1:1')))
+        self.assertEqual(2, param_server.subscribe_param('/foo/', ('node1', 'http://node1:1')))
         param_server.set_param('/foo', 'resub2', notify_task=self.notify_task)
-        self.assertEquals([([('node1', 'http://node1:1')], '/foo/', 'resub2'), ], self.last_update)
+        self.assertEqual([([('node1', 'http://node1:1')], '/foo/', 'resub2'), ], self.last_update)
         
         # change the URI
-        self.assertEquals('resub2', param_server.subscribe_param('/foo', ('node1', 'http://node1b:1')))
-        self.assertEquals('http://node1b:1', reg_manager.get_node('node1').api)
+        self.assertEqual('resub2', param_server.subscribe_param('/foo', ('node1', 'http://node1b:1')))
+        self.assertEqual('http://node1b:1', reg_manager.get_node('node1').api)
         param_server.set_param('/foo', 3, notify_task=self.notify_task)
-        self.assertEquals([([('node1', 'http://node1b:1')], '/foo/', 3), ], self.last_update)
+        self.assertEqual([([('node1', 'http://node1b:1')], '/foo/', 3), ], self.last_update)
         
         # multiple subscriptions to same param
-        self.assertEquals(3, param_server.subscribe_param('/foo', ('node2', 'http://node2:2')))
-        self.assertEquals('http://node2:2', reg_manager.get_node('node2').api)
+        self.assertEqual(3, param_server.subscribe_param('/foo', ('node2', 'http://node2:2')))
+        self.assertEqual('http://node2:2', reg_manager.get_node('node2').api)
         param_server.set_param('/foo', 4, notify_task=self.notify_task)
-        self.assertEquals([([('node1', 'http://node1b:1'), ('node2', 'http://node2:2')], '/foo/', 4), ], self.last_update)
+        self.assertEqual([([('node1', 'http://node1b:1'), ('node2', 'http://node2:2')], '/foo/', 4), ], self.last_update)
 
     def test_subscribe_param_tree(self):
         from rosmaster.registrations import RegistrationManager
@@ -145,30 +145,30 @@ class TestRospyParamServer(unittest.TestCase):
 
         # simple case - subscribe and set whole tree
         gains = {'p': 'P', 'i': 'I', 'd' : 'D'}
-        self.assertEquals({}, param_server.subscribe_param('/gains', ('ptnode', 'http://ptnode:1')))
+        self.assertEqual({}, param_server.subscribe_param('/gains', ('ptnode', 'http://ptnode:1')))
         param_server.set_param('/gains', gains.copy(), notify_task=self.notify_task)
-        self.assertEquals([([('ptnode', 'http://ptnode:1')], '/gains/', gains), ], self.last_update)
+        self.assertEqual([([('ptnode', 'http://ptnode:1')], '/gains/', gains), ], self.last_update)
         # - test with trailing slash
         param_server.set_param('/gains/', gains.copy(), notify_task=self.notify_task)
-        self.assertEquals([([('ptnode', 'http://ptnode:1')], '/gains/', gains), ], self.last_update)
+        self.assertEqual([([('ptnode', 'http://ptnode:1')], '/gains/', gains), ], self.last_update)
 
         # change params within tree
         param_server.set_param('/gains/p', 'P2', notify_task=self.notify_task)
-        self.assertEquals([([('ptnode', 'http://ptnode:1')], '/gains/p/', 'P2'), ], self.last_update)
+        self.assertEqual([([('ptnode', 'http://ptnode:1')], '/gains/p/', 'P2'), ], self.last_update)
         param_server.set_param('/gains/i', 'I2', notify_task=self.notify_task)
-        self.assertEquals([([('ptnode', 'http://ptnode:1')], '/gains/i/', 'I2'), ], self.last_update)
+        self.assertEqual([([('ptnode', 'http://ptnode:1')], '/gains/i/', 'I2'), ], self.last_update)
 
         # test overlapping subscriptions
-        self.assertEquals('P2', param_server.subscribe_param('/gains/p', ('ptnode2', 'http://ptnode2:2')))
+        self.assertEqual('P2', param_server.subscribe_param('/gains/p', ('ptnode2', 'http://ptnode2:2')))
         param_server.set_param('/gains', gains.copy(), notify_task=self.notify_task)
-        self.assertEquals([([('ptnode', 'http://ptnode:1')], '/gains/', gains), \
+        self.assertEqual([([('ptnode', 'http://ptnode:1')], '/gains/', gains), \
                            ([('ptnode2', 'http://ptnode2:2')], '/gains/p/', 'P'), \
                            ], self.last_update)
         # - retest with trailing slash on subscribe
         self.last_update = None
-        self.assertEquals('P', param_server.subscribe_param('/gains/p/', ('ptnode2', 'http://ptnode2:2')))
+        self.assertEqual('P', param_server.subscribe_param('/gains/p/', ('ptnode2', 'http://ptnode2:2')))
         param_server.set_param('/gains', gains.copy(), notify_task=self.notify_task)
-        self.assertEquals([([('ptnode', 'http://ptnode:1')], '/gains/', gains), \
+        self.assertEqual([([('ptnode', 'http://ptnode:1')], '/gains/', gains), \
                            ([('ptnode2', 'http://ptnode2:2')], '/gains/p/', 'P'), \
                            ], self.last_update)
         # test with overlapping (change to sub param)
@@ -183,23 +183,23 @@ class TestRospyParamServer(unittest.TestCase):
         # virtual deletion: subscribe to subparam, parameter tree reset
         self.last_update = None
         param_server.set_param('/gains2', gains.copy(), notify_task=self.notify_task)
-        self.assertEquals('P', param_server.subscribe_param('/gains2/p/', ('ptnode3', 'http://ptnode3:3')))
+        self.assertEqual('P', param_server.subscribe_param('/gains2/p/', ('ptnode3', 'http://ptnode3:3')))
         # - erase the sub parameters
         param_server.set_param('/gains2', {}, notify_task=self.notify_task)        
-        self.assertEquals([([('ptnode3', 'http://ptnode3:3')], '/gains2/p/', {}), ], self.last_update)        
+        self.assertEqual([([('ptnode3', 'http://ptnode3:3')], '/gains2/p/', {}), ], self.last_update)        
 
         #Final test: test subscription to entire tree
         self.last_update = None
         param_server.delete_param('/gains')
         param_server.delete_param('/gains2')        
-        self.assertEquals({}, param_server.get_param('/'))
-        self.assertEquals({}, param_server.subscribe_param('/', ('allnode', 'http://allnode:1')))
+        self.assertEqual({}, param_server.get_param('/'))
+        self.assertEqual({}, param_server.subscribe_param('/', ('allnode', 'http://allnode:1')))
         param_server.set_param('/one', 1, notify_task=self.notify_task)
-        self.assertEquals([([('allnode', 'http://allnode:1')], '/one/', 1), ], self.last_update)
+        self.assertEqual([([('allnode', 'http://allnode:1')], '/one/', 1), ], self.last_update)
         param_server.set_param('/two', 2, notify_task=self.notify_task)
-        self.assertEquals([([('allnode', 'http://allnode:1')], '/two/', 2), ], self.last_update)
+        self.assertEqual([([('allnode', 'http://allnode:1')], '/two/', 2), ], self.last_update)
         param_server.set_param('/foo/bar', 'bar', notify_task=self.notify_task)
-        self.assertEquals([([('allnode', 'http://allnode:1')], '/foo/bar/', 'bar'), ], self.last_update)
+        self.assertEqual([([('allnode', 'http://allnode:1')], '/foo/bar/', 'bar'), ], self.last_update)
         
 
     # verify that subscribe_param works with parameter deletion
@@ -212,34 +212,34 @@ class TestRospyParamServer(unittest.TestCase):
         param_server = ParamDictionary(reg_manager)
 
         # subscription to then delete parameter
-        self.assertEquals({}, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
+        self.assertEqual({}, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
         param_server.set_param('/foo', 1, notify_task=self.notify_task)
         param_server.delete_param('/foo', notify_task=self.notify_task)
-        self.assertEquals([([('node1', 'http://node1:1')], '/foo/', {}), ], self.last_update)
+        self.assertEqual([([('node1', 'http://node1:1')], '/foo/', {}), ], self.last_update)
         
         # subscribe to and delete whole tree
         gains = {'p': 'P', 'i': 'I', 'd' : 'D'}
-        self.assertEquals({}, param_server.subscribe_param('/gains', ('deltree', 'http://deltree:1')))
+        self.assertEqual({}, param_server.subscribe_param('/gains', ('deltree', 'http://deltree:1')))
         param_server.set_param('/gains', gains.copy(), notify_task=self.notify_task)
         param_server.delete_param('/gains', notify_task=self.notify_task)
-        self.assertEquals([([('deltree', 'http://deltree:1')], '/gains/', {}), ], self.last_update)
+        self.assertEqual([([('deltree', 'http://deltree:1')], '/gains/', {}), ], self.last_update)
 
         # subscribe to and delete params within subtree
-        self.assertEquals({}, param_server.subscribe_param('/gains2', ('deltree2', 'http://deltree2:2')))
+        self.assertEqual({}, param_server.subscribe_param('/gains2', ('deltree2', 'http://deltree2:2')))
         param_server.set_param('/gains2', gains.copy(), notify_task=self.notify_task)
         param_server.delete_param('/gains2/p', notify_task=self.notify_task)
-        self.assertEquals([([('deltree2', 'http://deltree2:2')], '/gains2/p/', {}), ], self.last_update)
+        self.assertEqual([([('deltree2', 'http://deltree2:2')], '/gains2/p/', {}), ], self.last_update)
         param_server.delete_param('/gains2/i', notify_task=self.notify_task)
-        self.assertEquals([([('deltree2', 'http://deltree2:2')], '/gains2/i/', {}), ], self.last_update)        
+        self.assertEqual([([('deltree2', 'http://deltree2:2')], '/gains2/i/', {}), ], self.last_update)        
         param_server.delete_param('/gains2', notify_task=self.notify_task)
-        self.assertEquals([([('deltree2', 'http://deltree2:2')], '/gains2/', {}), ], self.last_update)
+        self.assertEqual([([('deltree2', 'http://deltree2:2')], '/gains2/', {}), ], self.last_update)
         
         # delete parent tree
         k = '/ns1/ns2/ns3/key'
-        self.assertEquals({}, param_server.subscribe_param(k, ('del_parent', 'http://del_parent:1')))
+        self.assertEqual({}, param_server.subscribe_param(k, ('del_parent', 'http://del_parent:1')))
         param_server.set_param(k, 1, notify_task=self.notify_task)
         param_server.delete_param('/ns1/ns2', notify_task=self.notify_task)
-        self.assertEquals([([('del_parent', 'http://del_parent:1')], '/ns1/ns2/ns3/key/', {}), ], self.last_update)
+        self.assertEqual([([('del_parent', 'http://del_parent:1')], '/ns1/ns2/ns3/key/', {}), ], self.last_update)
     
     def test_unsubscribe_param(self):
         from rosmaster.registrations import RegistrationManager
@@ -251,34 +251,34 @@ class TestRospyParamServer(unittest.TestCase):
 
         # basic test
         self.last_update = None
-        self.assertEquals({}, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
+        self.assertEqual({}, param_server.subscribe_param('/foo', ('node1', 'http://node1:1')))
         param_server.set_param('/foo', 1, notify_task=self.notify_task)
-        self.assertEquals([([('node1', 'http://node1:1')], '/foo/', 1), ], self.last_update)
+        self.assertEqual([([('node1', 'http://node1:1')], '/foo/', 1), ], self.last_update)
         # - return value is actually generated by Registrations
         code, msg, val = param_server.unsubscribe_param('/foo', ('node1', 'http://node1:1'))
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)
         self.last_update = None
         param_server.set_param('/foo', 2, notify_task=self.notify_task)
-        self.assertEquals(None, self.last_update)
+        self.assertEqual(None, self.last_update)
         # - repeat the unsubscribe
         code, msg, val = param_server.unsubscribe_param('/foo', ('node1', 'http://node1:1'))
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)
         self.last_update = None
         param_server.set_param('/foo', 2, notify_task=self.notify_task)
-        self.assertEquals(None, self.last_update)
+        self.assertEqual(None, self.last_update)
 
         # verify that stale unsubscribe has no effect on active subscription
         self.last_update = None
-        self.assertEquals({}, param_server.subscribe_param('/bar', ('barnode', 'http://barnode:1')))
+        self.assertEqual({}, param_server.subscribe_param('/bar', ('barnode', 'http://barnode:1')))
         param_server.set_param('/bar', 3, notify_task=self.notify_task)
-        self.assertEquals([([('barnode', 'http://barnode:1')], '/bar/', 3), ], self.last_update)
+        self.assertEqual([([('barnode', 'http://barnode:1')], '/bar/', 3), ], self.last_update)
         code, msg, val = param_server.unsubscribe_param('/foo', ('barnode', 'http://notbarnode:1'))
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)
         param_server.set_param('/bar', 4, notify_task=self.notify_task)
-        self.assertEquals([([('barnode', 'http://barnode:1')], '/bar/', 4), ], self.last_update)
+        self.assertEqual([([('barnode', 'http://barnode:1')], '/bar/', 4), ], self.last_update)
         
     
     def _set_param(self, ctx, my_state, test_vals, param_server):
@@ -290,7 +290,7 @@ class TestRospyParamServer(unittest.TestCase):
                 for val in vals:
                     key = ns_join(caller_id, "%s-%s"%(type,count))
                     param_server.set_param(key, val)
-                    self.assert_(param_server.has_param(key))
+                    self.assertTrue(param_server.has_param(key))
                     true_key = ns_join(ctx, key)
                     my_state[true_key] = val
                     count += 1
@@ -307,7 +307,7 @@ class TestRospyParamServer(unittest.TestCase):
             except:
                 raise Exception("Exception raised while calling param_server.get_param(%s): %s"%(k, traceback.format_exc()))
             
-            self.assertEquals(v, v2)
+            self.assertEqual(v, v2)
         param_names = my_state.keys()
         ps_param_names = param_server.get_param_names()
         assert not set(param_names) ^ set(ps_param_names), "parameter server keys do not match local: %s"%(set(param_names)^set(ps_param_names))
@@ -318,20 +318,20 @@ class TestRospyParamServer(unittest.TestCase):
         from rosmaster.paramserver import ParamDictionary
         param_server = ParamDictionary(None)
 
-        self.failIf(param_server.has_param('/new_param'))
+        self.assertFalse(param_server.has_param('/new_param'))
         param_server.set_param('/new_param', 1)
-        self.assert_(param_server.has_param('/new_param'))
+        self.assertTrue(param_server.has_param('/new_param'))
 
         # test with param in sub-namespace
-        self.failIf(param_server.has_param('/sub/sub2/new_param2'))
+        self.assertFalse(param_server.has_param('/sub/sub2/new_param2'))
         # - verify that parameter tree does not exist yet (#587)
         for k in ['/sub/sub2/', '/sub/sub2', '/sub/', '/sub']:
-            self.failIf(param_server.has_param(k))
+            self.assertFalse(param_server.has_param(k))
         param_server.set_param('/sub/sub2/new_param2', 1)
-        self.assert_(param_server.has_param('/sub/sub2/new_param2'))
+        self.assertTrue(param_server.has_param('/sub/sub2/new_param2'))
         # - verify that parameter tree now exists (#587)
         for k in ['/sub/sub2/', '/sub/sub2', '/sub/', '/sub']:
-            self.assert_(param_server.has_param(k))
+            self.assertTrue(param_server.has_param(k))
 
     
     ## test ^param naming, i.e. upwards-looking get access
@@ -368,47 +368,47 @@ class TestRospyParamServer(unittest.TestCase):
         # set the val parameter at four levels so we can validate search
         
         # - set val1
-        self.failIf(param_server.has_param('/level1/param'))
-        self.failIf(param_server.search_param('/level1/node', 'param')) 
+        self.assertFalse(param_server.has_param('/level1/param'))
+        self.assertFalse(param_server.search_param('/level1/node', 'param')) 
         param_server.set_param('/level1/param', val1)
         
         # - test param on val1
         for ns in ['/level1/node', '/level1/level2/node', '/level1/level2/level3/node']:
-            self.assertEquals('/level1/param', param_server.search_param(ns, 'param'), "failed with ns[%s]"%ns)
-            self.assertEquals('/level1/param/', param_server.search_param(ns, 'param/'))
-            self.assertEquals('/level1/param/level1_p1', param_server.search_param(ns, 'param/level1_p1'))
-            self.assertEquals('/level1/param/level1_p2/level2_p2', param_server.search_param(ns, 'param/level1_p2/level2_p2'))
-        self.assertEquals(None, param_server.search_param('/root', 'param'))
-        self.assertEquals(None, param_server.search_param('/root', 'param/'))        
+            self.assertEqual('/level1/param', param_server.search_param(ns, 'param'), "failed with ns[%s]"%ns)
+            self.assertEqual('/level1/param/', param_server.search_param(ns, 'param/'))
+            self.assertEqual('/level1/param/level1_p1', param_server.search_param(ns, 'param/level1_p1'))
+            self.assertEqual('/level1/param/level1_p2/level2_p2', param_server.search_param(ns, 'param/level1_p2/level2_p2'))
+        self.assertEqual(None, param_server.search_param('/root', 'param'))
+        self.assertEqual(None, param_server.search_param('/root', 'param/'))        
 
         # - set val2
-        self.failIf(param_server.has_param('/level1/level2/param'))
+        self.assertFalse(param_server.has_param('/level1/level2/param'))
         param_server.set_param('/level1/level2/param', val2)
 
         # - test param on val2
         for ns in ['/level1/level2/node', '/level1/level2/level3/node', '/level1/level2/level3/level4/node']:
-            self.assertEquals('/level1/level2/param', param_server.search_param(ns, 'param'))
-            self.assertEquals('/level1/level2/param/', param_server.search_param(ns, 'param/'))
-        self.assertEquals('/level1/param', param_server.search_param('/level1/node', 'param'))
-        self.assertEquals('/level1/param/', param_server.search_param('/level1/node', 'param/'))        
-        self.assertEquals(None, param_server.search_param('/root', 'param'))
+            self.assertEqual('/level1/level2/param', param_server.search_param(ns, 'param'))
+            self.assertEqual('/level1/level2/param/', param_server.search_param(ns, 'param/'))
+        self.assertEqual('/level1/param', param_server.search_param('/level1/node', 'param'))
+        self.assertEqual('/level1/param/', param_server.search_param('/level1/node', 'param/'))        
+        self.assertEqual(None, param_server.search_param('/root', 'param'))
         
         # - set val3
-        self.failIf(param_server.has_param('/level1/level2/level3/param'))
+        self.assertFalse(param_server.has_param('/level1/level2/level3/param'))
         param_server.set_param('/level1/level2/level3/param', val3)
 
         # - test param on val3
         for ns in ['/level1/level2/level3/node', '/level1/level2/level3/level4/node']:
-            self.assertEquals('/level1/level2/level3/param', param_server.search_param(ns, 'param'))
-        self.assertEquals('/level1/level2/param', param_server.search_param('/level1/level2/node', 'param'))
-        self.assertEquals('/level1/param', param_server.search_param('/level1/node', 'param'))
+            self.assertEqual('/level1/level2/level3/param', param_server.search_param(ns, 'param'))
+        self.assertEqual('/level1/level2/param', param_server.search_param('/level1/level2/node', 'param'))
+        self.assertEqual('/level1/param', param_server.search_param('/level1/node', 'param'))
 
         # test subparams before we set val4 on the root
         #  - test looking for param/sub_param
 
-        self.assertEquals(None, param_server.search_param('/root', 'param'))
-        self.assertEquals(None, param_server.search_param('/root', 'param/level1_p1'))
-        self.assertEquals(None, param_server.search_param('/not/level1/level2/level3/level4/node', 'param/level1_p1'))
+        self.assertEqual(None, param_server.search_param('/root', 'param'))
+        self.assertEqual(None, param_server.search_param('/root', 'param/level1_p1'))
+        self.assertEqual(None, param_server.search_param('/not/level1/level2/level3/level4/node', 'param/level1_p1'))
         tests = [
             ('/level1/node', '/level1/param/'),
             ('/level1/level2/', '/level1/level2/param/'),
@@ -422,34 +422,34 @@ class TestRospyParamServer(unittest.TestCase):
             
             ]
         for ns, pbase in tests:
-            self.assertEquals(pbase+'level1_p1',
+            self.assertEqual(pbase+'level1_p1',
                               param_server.search_param(ns, 'param/level1_p1'))
             retval = param_server.search_param(ns, 'param/level1_p2/level2_p2')
-            self.assertEquals(pbase+'level1_p2/level2_p2', retval,
+            self.assertEqual(pbase+'level1_p2/level2_p2', retval,
                               "failed with ns[%s] pbase[%s]: %s"%(ns, pbase, retval))
 
         # - set val4 on the root
-        self.failIf(param_server.has_param('/param'))
+        self.assertFalse(param_server.has_param('/param'))
         param_server.set_param('/param', val4)
-        self.assertEquals('/param', param_server.search_param('/root', 'param'))
-        self.assertEquals('/param', param_server.search_param('/notlevel1/node', 'param'))
-        self.assertEquals('/level1/param', param_server.search_param('/level1/node', 'param'))
-        self.assertEquals('/level1/param', param_server.search_param('/level1', 'param'))
-        self.assertEquals('/level1/param', param_server.search_param('/level1/', 'param'))
+        self.assertEqual('/param', param_server.search_param('/root', 'param'))
+        self.assertEqual('/param', param_server.search_param('/notlevel1/node', 'param'))
+        self.assertEqual('/level1/param', param_server.search_param('/level1/node', 'param'))
+        self.assertEqual('/level1/param', param_server.search_param('/level1', 'param'))
+        self.assertEqual('/level1/param', param_server.search_param('/level1/', 'param'))
 
         # make sure that partial match works
         val5 = { 'level1_p1': random.randint(0, 10000),
                  'level1_p2' : { }}
         
-        self.failIf(param_server.has_param('/partial1/param'))
+        self.assertFalse(param_server.has_param('/partial1/param'))
         param_server.set_param('/partial1/param', val5)
-        self.assertEquals('/partial1/param', param_server.search_param('/partial1', 'param'))
-        self.assertEquals('/partial1/param/level1_p1',
+        self.assertEqual('/partial1/param', param_server.search_param('/partial1', 'param'))
+        self.assertEqual('/partial1/param/level1_p1',
                           param_server.search_param('/partial1', 'param/level1_p1'))
         # - this is the important check, should return key even if it doesn't exist yet based on stem match
-        self.assertEquals('/partial1/param/non_existent',
+        self.assertEqual('/partial1/param/non_existent',
                           param_server.search_param('/partial1', 'param/non_existent'))
-        self.assertEquals('/partial1/param/level1_p2/non_existent',
+        self.assertEqual('/partial1/param/level1_p2/non_existent',
                           param_server.search_param('/partial1', 'param/level1_p2/non_existent'))
 
 
@@ -463,31 +463,31 @@ class TestRospyParamServer(unittest.TestCase):
         full_dict = {}
         
         # very similar to has param sequence
-        self.failIf(param_server.has_param('/new_param'))
-        self.failIf(param_server.has_param('/new_param/'))        
+        self.assertFalse(param_server.has_param('/new_param'))
+        self.assertFalse(param_server.has_param('/new_param/'))        
         self.assertGetParamFail(param_server, '/new_param')
         param_server.set_param('/new_param', val)
         full_dict['new_param'] = val
-        self.assertEquals(val, param_server.get_param('/new_param'))
-        self.assertEquals(val, param_server.get_param('/new_param/'))
+        self.assertEqual(val, param_server.get_param('/new_param'))
+        self.assertEqual(val, param_server.get_param('/new_param/'))
         # - test homonym
-        self.assertEquals(val, param_server.get_param('/new_param//'))
+        self.assertEqual(val, param_server.get_param('/new_param//'))
         
         # test full get
-        self.assertEquals(full_dict, param_server.get_param('/'))
+        self.assertEqual(full_dict, param_server.get_param('/'))
         
         # test with param in sub-namespace
         val = random.randint(0, 10000)        
-        self.failIf(param_server.has_param('/sub/sub2/new_param2'))
+        self.assertFalse(param_server.has_param('/sub/sub2/new_param2'))
         self.assertGetParamFail(param_server, '/sub/sub2/new_param2')
         param_server.set_param('/sub/sub2/new_param2', val)
         full_dict['sub'] = {'sub2': { 'new_param2': val }}
-        self.assertEquals(val, param_server.get_param('/sub/sub2/new_param2'))
+        self.assertEqual(val, param_server.get_param('/sub/sub2/new_param2'))
         # - test homonym
-        self.assertEquals(val, param_server.get_param('/sub///sub2/new_param2/'))
+        self.assertEqual(val, param_server.get_param('/sub///sub2/new_param2/'))
         
         # test full get
-        self.assertEquals(full_dict, param_server.get_param('/'))
+        self.assertEqual(full_dict, param_server.get_param('/'))
 
         # test that parameter server namespace-get (#587)
         val1 = random.randint(0, 10000)
@@ -496,7 +496,7 @@ class TestRospyParamServer(unittest.TestCase):
         
         for k in ['/gains/P', '/gains/I', '/gains/D', '/gains']:
             self.assertGetParamFail(param_server, k)
-            self.failIf(param_server.has_param(k))
+            self.assertFalse(param_server.has_param(k))
 
         param_server.set_param('/gains/P', val1)
         param_server.set_param('/gains/I', val2)
@@ -504,30 +504,30 @@ class TestRospyParamServer(unittest.TestCase):
 
         pid = {'P': val1, 'I': val2, 'D': val3}
         full_dict['gains'] = pid
-        self.assertEquals(pid,
+        self.assertEqual(pid,
                           param_server.get_param('/gains'))
-        self.assertEquals(pid,
+        self.assertEqual(pid,
                           param_server.get_param('/gains/'))
-        self.assertEquals(full_dict,
+        self.assertEqual(full_dict,
                           param_server.get_param('/'))
 
-        self.failIf(param_server.has_param('/ns/gains/P'))
-        self.failIf(param_server.has_param('/ns/gains/I'))
-        self.failIf(param_server.has_param('/ns/gains/D'))
-        self.failIf(param_server.has_param('/ns/gains'))
+        self.assertFalse(param_server.has_param('/ns/gains/P'))
+        self.assertFalse(param_server.has_param('/ns/gains/I'))
+        self.assertFalse(param_server.has_param('/ns/gains/D'))
+        self.assertFalse(param_server.has_param('/ns/gains'))
         
         param_server.set_param('/ns/gains/P', val1)
         param_server.set_param('/ns/gains/I', val2)
         param_server.set_param('/ns/gains/D', val3)
         full_dict['ns'] = {'gains': pid}
         
-        self.assertEquals(pid,
+        self.assertEqual(pid,
                           param_server.get_param('/ns/gains'))
-        self.assertEquals({'gains': pid},
+        self.assertEqual({'gains': pid},
                           param_server.get_param('/ns/'))
-        self.assertEquals({'gains': pid},
+        self.assertEqual({'gains': pid},
                           param_server.get_param('/ns'))
-        self.assertEquals(full_dict,
+        self.assertEqual(full_dict,
                           param_server.get_param('/'))
         
         
@@ -545,13 +545,13 @@ class TestRospyParamServer(unittest.TestCase):
 
         param_server.set_param('/foo', 'foo')
         param_server.set_param('/bar', 'bar')        
-        self.assert_(param_server.has_param('/foo'))
-        self.assert_(param_server.has_param('/bar'))        
+        self.assertTrue(param_server.has_param('/foo'))
+        self.assertTrue(param_server.has_param('/bar'))        
         param_server.delete_param('/foo')
-        self.failIf(param_server.has_param('/foo'))
+        self.assertFalse(param_server.has_param('/foo'))
         # - test with trailing slash
         param_server.delete_param('/bar/')
-        self.failIf(param_server.has_param('/bar'))
+        self.assertFalse(param_server.has_param('/bar'))
 
         # test with namespaces
         param_server.set_param("/sub/key/x", 1)
@@ -565,29 +565,29 @@ class TestRospyParamServer(unittest.TestCase):
             self.fail("delete_param of non-existent should have failed")
         except: pass
 
-        self.assert_(param_server.has_param('/sub/key/x'))
-        self.assert_(param_server.has_param('/sub/key/y'))
-        self.assert_(param_server.has_param('/sub/key'))                  
+        self.assertTrue(param_server.has_param('/sub/key/x'))
+        self.assertTrue(param_server.has_param('/sub/key/y'))
+        self.assertTrue(param_server.has_param('/sub/key'))                  
         param_server.delete_param('/sub/key')
-        self.failIf(param_server.has_param('/sub/key'))      
-        self.failIf(param_server.has_param('/sub/key/x'))
-        self.failIf(param_server.has_param('/sub/key/y'))
+        self.assertFalse(param_server.has_param('/sub/key'))      
+        self.assertFalse(param_server.has_param('/sub/key/x'))
+        self.assertFalse(param_server.has_param('/sub/key/y'))
 
         # test with namespaces (dictionary vals)
         param_server.set_param('/sub2', {'key': { 'x' : 1, 'y' : 2}})
-        self.assert_(param_server.has_param('/sub2/key/x'))
-        self.assert_(param_server.has_param('/sub2/key/y'))
-        self.assert_(param_server.has_param('/sub2/key'))                  
+        self.assertTrue(param_server.has_param('/sub2/key/x'))
+        self.assertTrue(param_server.has_param('/sub2/key/y'))
+        self.assertTrue(param_server.has_param('/sub2/key'))                  
         param_server.delete_param('/sub2/key')
-        self.failIf(param_server.has_param('/sub2/key'))      
-        self.failIf(param_server.has_param('/sub2/key/x'))
-        self.failIf(param_server.has_param('/sub2/key/y'))
+        self.assertFalse(param_server.has_param('/sub2/key'))      
+        self.assertFalse(param_server.has_param('/sub2/key/x'))
+        self.assertFalse(param_server.has_param('/sub2/key/y'))
 
         # test with namespaces: treat value as if its a namespace
         # - try to get the dictionary-of-dictionary code to fail
         #   by descending a value key as if it is a namespace
         param_server.set_param('/a', 'b')
-        self.assert_(param_server.has_param('/a'))
+        self.assertTrue(param_server.has_param('/a'))
         try:
             param_server.delete_param('/a/b/c')
             self.fail_("should have raised key error")
@@ -608,79 +608,79 @@ class TestRospyParamServer(unittest.TestCase):
         except: pass
 
         # very similar to has param sequence
-        self.failIf(param_server.has_param('/new_param'))
+        self.assertFalse(param_server.has_param('/new_param'))
         param_server.set_param('/new_param', val)
-        self.assertEquals(val, param_server.get_param('/new_param'))
-        self.assertEquals(val, param_server.get_param('/new_param/'))
-        self.assert_(param_server.has_param('/new_param'))
+        self.assertEqual(val, param_server.get_param('/new_param'))
+        self.assertEqual(val, param_server.get_param('/new_param/'))
+        self.assertTrue(param_server.has_param('/new_param'))
 
         # test with param in sub-namespace
         val = random.randint(0, 10000)        
-        self.failIf(param_server.has_param('/sub/sub2/new_param2'))
+        self.assertFalse(param_server.has_param('/sub/sub2/new_param2'))
         param_server.set_param('/sub/sub2/new_param2', val)
-        self.assertEquals(val, param_server.get_param('/sub/sub2/new_param2'))
+        self.assertEqual(val, param_server.get_param('/sub/sub2/new_param2'))
 
         # test with param type mutation
         vals = ['a', {'a': 'b'}, 1, 1., 'foo', {'c': 'd'}, 4, {'a': {'b': 'c'}}, 3]
         for v in vals:
             param_server.set_param('/multi/multi_param', v)
-            self.assertEquals(v, param_server.get_param('/multi/multi_param'))
+            self.assertEqual(v, param_server.get_param('/multi/multi_param'))
 
         # - set value within subtree that mutates higher level value
         param_server.set_param('/multi2/multi_param', 1)
-        self.assertEquals(1, param_server.get_param('/multi2/multi_param'))
+        self.assertEqual(1, param_server.get_param('/multi2/multi_param'))
 
         param_server.set_param('/multi2/multi_param/a', 2)
-        self.assertEquals(2, param_server.get_param('/multi2/multi_param/a'))
-        self.assertEquals({'a': 2}, param_server.get_param('/multi2/multi_param/'))        
+        self.assertEqual(2, param_server.get_param('/multi2/multi_param/a'))
+        self.assertEqual({'a': 2}, param_server.get_param('/multi2/multi_param/'))        
         param_server.set_param('/multi2/multi_param/a/b', 3)
-        self.assertEquals(3, param_server.get_param('/multi2/multi_param/a/b'))
-        self.assertEquals({'b': 3}, param_server.get_param('/multi2/multi_param/a/'))
-        self.assertEquals({'a': {'b': 3}}, param_server.get_param('/multi2/multi_param/'))        
+        self.assertEqual(3, param_server.get_param('/multi2/multi_param/a/b'))
+        self.assertEqual({'b': 3}, param_server.get_param('/multi2/multi_param/a/'))
+        self.assertEqual({'a': {'b': 3}}, param_server.get_param('/multi2/multi_param/'))        
 
         
         # test that parameter server namespace-set (#587)
-        self.failIf(param_server.has_param('/gains/P'))
-        self.failIf(param_server.has_param('/gains/I'))
-        self.failIf(param_server.has_param('/gains/D'))                        
-        self.failIf(param_server.has_param('/gains'))
+        self.assertFalse(param_server.has_param('/gains/P'))
+        self.assertFalse(param_server.has_param('/gains/I'))
+        self.assertFalse(param_server.has_param('/gains/D'))                        
+        self.assertFalse(param_server.has_param('/gains'))
 
         pid = {'P': random.randint(0, 10000), 'I': random.randint(0, 10000), 'D': random.randint(0, 10000)}
         param_server.set_param('/gains', pid)
-        self.assertEquals(pid,  param_server.get_param('/gains'))
-        self.assertEquals(pid['P'], param_server.get_param('/gains/P'))
-        self.assertEquals(pid['I'], param_server.get_param('/gains/I'))
-        self.assertEquals(pid['D'], param_server.get_param('/gains/D'))
+        self.assertEqual(pid,  param_server.get_param('/gains'))
+        self.assertEqual(pid['P'], param_server.get_param('/gains/P'))
+        self.assertEqual(pid['I'], param_server.get_param('/gains/I'))
+        self.assertEqual(pid['D'], param_server.get_param('/gains/D'))
 
         subns = {'gains1': pid, 'gains2': pid}
         param_server.set_param('/ns', subns)
-        self.assertEquals(pid['P'], param_server.get_param('/ns/gains1/P'))
-        self.assertEquals(pid['I'], param_server.get_param('/ns/gains1/I'))
-        self.assertEquals(pid['D'], param_server.get_param('/ns/gains1/D'))
-        self.assertEquals(pid, param_server.get_param('/ns/gains1'))
-        self.assertEquals(pid, param_server.get_param('/ns/gains2'))
-        self.assertEquals(subns, param_server.get_param('/ns/'))
+        self.assertEqual(pid['P'], param_server.get_param('/ns/gains1/P'))
+        self.assertEqual(pid['I'], param_server.get_param('/ns/gains1/I'))
+        self.assertEqual(pid['D'], param_server.get_param('/ns/gains1/D'))
+        self.assertEqual(pid, param_server.get_param('/ns/gains1'))
+        self.assertEqual(pid, param_server.get_param('/ns/gains2'))
+        self.assertEqual(subns, param_server.get_param('/ns/'))
 
         # test empty dictionary set
         param_server.set_param('/ns', {})
         # - param should still exist
-        self.assert_(param_server.has_param('/ns/'))
+        self.assertTrue(param_server.has_param('/ns/'))
         # - value should remain dictionary
-        self.assertEquals({}, param_server.get_param('/ns/'))
+        self.assertEqual({}, param_server.get_param('/ns/'))
         # - value2 below /ns/ should be erased
-        self.failIf(param_server.has_param('/ns/gains1'))
-        self.failIf(param_server.has_param('/ns/gains1/P'))
+        self.assertFalse(param_server.has_param('/ns/gains1'))
+        self.assertFalse(param_server.has_param('/ns/gains1/P'))
         
         # verify that root can be set and that it erases all values
         param_server.set_param('/', {})
-        self.failIf(param_server.has_param('/new_param'))
+        self.assertFalse(param_server.has_param('/new_param'))
         param_server.set_param('/', {'foo': 1, 'bar': 2, 'baz': {'a': 'a'}})
-        self.assertEquals(1, param_server.get_param('/foo'))
-        self.assertEquals(1, param_server.get_param('/foo/'))        
-        self.assertEquals(2, param_server.get_param('/bar'))
-        self.assertEquals(2, param_server.get_param('/bar/'))
-        self.assertEquals('a', param_server.get_param('/baz/a'))
-        self.assertEquals('a', param_server.get_param('/baz/a/'))
+        self.assertEqual(1, param_server.get_param('/foo'))
+        self.assertEqual(1, param_server.get_param('/foo/'))        
+        self.assertEqual(2, param_server.get_param('/bar'))
+        self.assertEqual(2, param_server.get_param('/bar/'))
+        self.assertEqual('a', param_server.get_param('/baz/a'))
+        self.assertEqual('a', param_server.get_param('/baz/a/'))
 
     # test_param_values: test storage of all XML-RPC compatible types"""
     def test_param_values(self):
diff --git a/test/test_rosmaster_registrations.py b/test/test_rosmaster_registrations.py
index 0729c6c1a..ab8be3e2b 100644
--- a/test/test_rosmaster_registrations.py
+++ b/test/test_rosmaster_registrations.py
@@ -46,89 +46,89 @@ class TestRosmasterRegistrations(unittest.TestCase):
         n = NodeRef('n1', 'http://localhost:1234')
         # test services
         n.add(Registrations.SERVICE, 'add_two_ints')
-        self.failIf(n.is_empty())
-        self.assert_('add_two_ints' in n.services)
-        self.assertEquals(['add_two_ints'], n.services)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('add_two_ints' in n.services)
+        self.assertEqual(['add_two_ints'], n.services)
         
         n.add(Registrations.SERVICE, 'add_three_ints')
-        self.failIf(n.is_empty())
-        self.assert_('add_three_ints' in n.services)
-        self.assert_('add_two_ints' in n.services)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('add_three_ints' in n.services)
+        self.assertTrue('add_two_ints' in n.services)
 
         n.remove(Registrations.SERVICE, 'add_two_ints')
-        self.assert_('add_three_ints' in n.services)
-        self.assertEquals(['add_three_ints'], n.services)
-        self.failIf('add_two_ints' in n.services)
-        self.failIf(n.is_empty())
+        self.assertTrue('add_three_ints' in n.services)
+        self.assertEqual(['add_three_ints'], n.services)
+        self.assertFalse('add_two_ints' in n.services)
+        self.assertFalse(n.is_empty())
         
         n.remove(Registrations.SERVICE, 'add_three_ints')        
-        self.failIf('add_three_ints' in n.services)
-        self.failIf('add_two_ints' in n.services)
-        self.assertEquals([], n.services)
-        self.assert_(n.is_empty())
+        self.assertFalse('add_three_ints' in n.services)
+        self.assertFalse('add_two_ints' in n.services)
+        self.assertEqual([], n.services)
+        self.assertTrue(n.is_empty())
 
     def test_NodeRef_subs(self):
         from rosmaster.registrations import NodeRef, Registrations
         n = NodeRef('n1', 'http://localhost:1234')
         # test topic suscriptions
         n.add(Registrations.TOPIC_SUBSCRIPTIONS, 'topic1')
-        self.failIf(n.is_empty())
-        self.assert_('topic1' in n.topic_subscriptions)
-        self.assertEquals(['topic1'], n.topic_subscriptions)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('topic1' in n.topic_subscriptions)
+        self.assertEqual(['topic1'], n.topic_subscriptions)
         
         n.add(Registrations.TOPIC_SUBSCRIPTIONS, 'topic2')
-        self.failIf(n.is_empty())
-        self.assert_('topic2' in n.topic_subscriptions)
-        self.assert_('topic1' in n.topic_subscriptions)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('topic2' in n.topic_subscriptions)
+        self.assertTrue('topic1' in n.topic_subscriptions)
 
         n.remove(Registrations.TOPIC_SUBSCRIPTIONS, 'topic1')
-        self.assert_('topic2' in n.topic_subscriptions)
-        self.assertEquals(['topic2'], n.topic_subscriptions)
-        self.failIf('topic1' in n.topic_subscriptions)
-        self.failIf(n.is_empty())
+        self.assertTrue('topic2' in n.topic_subscriptions)
+        self.assertEqual(['topic2'], n.topic_subscriptions)
+        self.assertFalse('topic1' in n.topic_subscriptions)
+        self.assertFalse(n.is_empty())
         
         n.remove(Registrations.TOPIC_SUBSCRIPTIONS, 'topic2')        
-        self.failIf('topic2' in n.topic_subscriptions)
-        self.failIf('topic1' in n.topic_subscriptions)
-        self.assertEquals([], n.topic_subscriptions)
-        self.assert_(n.is_empty())
+        self.assertFalse('topic2' in n.topic_subscriptions)
+        self.assertFalse('topic1' in n.topic_subscriptions)
+        self.assertEqual([], n.topic_subscriptions)
+        self.assertTrue(n.is_empty())
 
     def test_NodeRef_pubs(self):
         from rosmaster.registrations import NodeRef, Registrations
         n = NodeRef('n1', 'http://localhost:1234')
         # test topic publications
         n.add(Registrations.TOPIC_PUBLICATIONS, 'topic1')
-        self.failIf(n.is_empty())
-        self.assert_('topic1' in n.topic_publications)
-        self.assertEquals(['topic1'], n.topic_publications)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('topic1' in n.topic_publications)
+        self.assertEqual(['topic1'], n.topic_publications)
         
         n.add(Registrations.TOPIC_PUBLICATIONS, 'topic2')
-        self.failIf(n.is_empty())
-        self.assert_('topic2' in n.topic_publications)
-        self.assert_('topic1' in n.topic_publications)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('topic2' in n.topic_publications)
+        self.assertTrue('topic1' in n.topic_publications)
 
         n.remove(Registrations.TOPIC_PUBLICATIONS, 'topic1')
-        self.assert_('topic2' in n.topic_publications)
-        self.assertEquals(['topic2'], n.topic_publications)
-        self.failIf('topic1' in n.topic_publications)
-        self.failIf(n.is_empty())
+        self.assertTrue('topic2' in n.topic_publications)
+        self.assertEqual(['topic2'], n.topic_publications)
+        self.assertFalse('topic1' in n.topic_publications)
+        self.assertFalse(n.is_empty())
         
         n.remove(Registrations.TOPIC_PUBLICATIONS, 'topic2')        
-        self.failIf('topic2' in n.topic_publications)
-        self.failIf('topic1' in n.topic_publications)
-        self.assertEquals([], n.topic_publications)
-        self.assert_(n.is_empty())
+        self.assertFalse('topic2' in n.topic_publications)
+        self.assertFalse('topic1' in n.topic_publications)
+        self.assertEqual([], n.topic_publications)
+        self.assertTrue(n.is_empty())
 
     def test_NodeRef_base(self):
         import rosmaster.exceptions
         from rosmaster.registrations import NodeRef, Registrations
         n = NodeRef('n1', 'http://localhost:1234')
-        self.assertEquals('http://localhost:1234', n.api)
-        self.assertEquals([], n.param_subscriptions)
-        self.assertEquals([], n.topic_subscriptions)
-        self.assertEquals([], n.topic_publications)
-        self.assertEquals([], n.services)
-        self.assert_(n.is_empty())
+        self.assertEqual('http://localhost:1234', n.api)
+        self.assertEqual([], n.param_subscriptions)
+        self.assertEqual([], n.topic_subscriptions)
+        self.assertEqual([], n.topic_publications)
+        self.assertEqual([], n.services)
+        self.assertTrue(n.is_empty())
 
         try:
             n.add(12345, 'topic')
@@ -145,36 +145,36 @@ class TestRosmasterRegistrations(unittest.TestCase):
         n.add(Registrations.TOPIC_SUBSCRIPTIONS, 'topic3')        
         n.add(Registrations.PARAM_SUBSCRIPTIONS, 'topic4')        
         n.add(Registrations.SERVICE, 'serv')        
-        self.failIf(n.is_empty())
+        self.assertFalse(n.is_empty())
 
         n.clear()
-        self.assert_(n.is_empty())        
+        self.assertTrue(n.is_empty())        
 
     def test_NodeRef_param_subs(self):
         from rosmaster.registrations import NodeRef, Registrations
         n = NodeRef('n1', 'http://localhost:1234')
         # test param suscriptions
         n.add(Registrations.PARAM_SUBSCRIPTIONS, 'param1')
-        self.failIf(n.is_empty())
-        self.assert_('param1' in n.param_subscriptions)
-        self.assertEquals(['param1'], n.param_subscriptions)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('param1' in n.param_subscriptions)
+        self.assertEqual(['param1'], n.param_subscriptions)
         
         n.add(Registrations.PARAM_SUBSCRIPTIONS, 'param2')
-        self.failIf(n.is_empty())
-        self.assert_('param2' in n.param_subscriptions)
-        self.assert_('param1' in n.param_subscriptions)
+        self.assertFalse(n.is_empty())
+        self.assertTrue('param2' in n.param_subscriptions)
+        self.assertTrue('param1' in n.param_subscriptions)
 
         n.remove(Registrations.PARAM_SUBSCRIPTIONS, 'param1')
-        self.assert_('param2' in n.param_subscriptions)
-        self.assertEquals(['param2'], n.param_subscriptions)
-        self.failIf('param1' in n.param_subscriptions)
-        self.failIf(n.is_empty())
+        self.assertTrue('param2' in n.param_subscriptions)
+        self.assertEqual(['param2'], n.param_subscriptions)
+        self.assertFalse('param1' in n.param_subscriptions)
+        self.assertFalse(n.is_empty())
         
         n.remove(Registrations.PARAM_SUBSCRIPTIONS, 'param2')        
-        self.failIf('param2' in n.param_subscriptions)
-        self.failIf('param1' in n.param_subscriptions)
-        self.assertEquals([], n.param_subscriptions)
-        self.assert_(n.is_empty())
+        self.assertFalse('param2' in n.param_subscriptions)
+        self.assertFalse('param1' in n.param_subscriptions)
+        self.assertEqual([], n.param_subscriptions)
+        self.assertTrue(n.is_empty())
 
     ## subroutine of registration tests that test topic/param type Reg objects
     ## @param r Registrations: initialized registrations object to test
@@ -183,82 +183,82 @@ class TestRosmasterRegistrations(unittest.TestCase):
 
         # - note that we've updated node1's API
         r.register('topic1', 'node1', 'http://node1:5678')
-        self.assert_('topic1' in r) # test contains
-        self.assert_(r.has_key('topic1')) # test contains
-        self.assertEquals(['topic1'], [k for k in r.iterkeys()])
-        self.assertEquals(['http://node1:5678'], r.get_apis('topic1'))
-        self.assertEquals([('node1', 'http://node1:5678')], r['topic1'])
-        self.failIf(not r) #test nonzero
-        self.assertEquals(None, r.get_service_api('topic1')) #make sure no contamination
-        self.assertEquals([['topic1', ['node1']]], r.get_state())
+        self.assertTrue('topic1' in r) # test contains
+        self.assertTrue(r.has_key('topic1')) # test contains
+        self.assertEqual(['topic1'], [k for k in r.iterkeys()])
+        self.assertEqual(['http://node1:5678'], r.get_apis('topic1'))
+        self.assertEqual([('node1', 'http://node1:5678')], r['topic1'])
+        self.assertFalse(not r) #test nonzero
+        self.assertEqual(None, r.get_service_api('topic1')) #make sure no contamination
+        self.assertEqual([['topic1', ['node1']]], r.get_state())
 
         r.register('topic1', 'node2', 'http://node2:5678')
-        self.assertEquals(['topic1'], [k for k in r.iterkeys()])        
-        self.assertEquals(['topic1'], [k for k in r.iterkeys()])
-        self.assertEquals(2, len(r.get_apis('topic1')))
-        self.assert_('http://node1:5678' in r.get_apis('topic1'))
-        self.assert_('http://node2:5678' in r.get_apis('topic1'))
-        self.assertEquals(2, len(r['topic1']))
-        self.assert_(('node1', 'http://node1:5678') in r['topic1'], r['topic1'])
-        self.assert_(('node2', 'http://node2:5678') in r['topic1'])                
-        self.assertEquals([['topic1', ['node1', 'node2']]], r.get_state())
+        self.assertEqual(['topic1'], [k for k in r.iterkeys()])        
+        self.assertEqual(['topic1'], [k for k in r.iterkeys()])
+        self.assertEqual(2, len(r.get_apis('topic1')))
+        self.assertTrue('http://node1:5678' in r.get_apis('topic1'))
+        self.assertTrue('http://node2:5678' in r.get_apis('topic1'))
+        self.assertEqual(2, len(r['topic1']))
+        self.assertTrue(('node1', 'http://node1:5678') in r['topic1'], r['topic1'])
+        self.assertTrue(('node2', 'http://node2:5678') in r['topic1'])                
+        self.assertEqual([['topic1', ['node1', 'node2']]], r.get_state())
 
         # TODO: register second topic
         r.register('topic2', 'node3', 'http://node3:5678')
-        self.assert_('topic2' in r) # test contains
-        self.assert_(r.has_key('topic2')) # test contains
-        self.assert_('topic1' in [k for k in r.iterkeys()])
-        self.assert_('topic2' in [k for k in r.iterkeys()])
-        self.assertEquals(['http://node3:5678'], r.get_apis('topic2'))
-        self.assertEquals([('node3', 'http://node3:5678')], r['topic2'])
-        self.failIf(not r) #test nonzero
-        self.assert_(['topic1', ['node1', 'node2']] in r.get_state(), r.get_state())
-        self.assert_(['topic2', ['node3']] in r.get_state(), r.get_state())
+        self.assertTrue('topic2' in r) # test contains
+        self.assertTrue(r.has_key('topic2')) # test contains
+        self.assertTrue('topic1' in [k for k in r.iterkeys()])
+        self.assertTrue('topic2' in [k for k in r.iterkeys()])
+        self.assertEqual(['http://node3:5678'], r.get_apis('topic2'))
+        self.assertEqual([('node3', 'http://node3:5678')], r['topic2'])
+        self.assertFalse(not r) #test nonzero
+        self.assertTrue(['topic1', ['node1', 'node2']] in r.get_state(), r.get_state())
+        self.assertTrue(['topic2', ['node3']] in r.get_state(), r.get_state())
         
         # Unregister
 
         # - fail if node is not registered
         code, _, val = r.unregister('topic1', 'node3', 'http://node3:5678')
-        self.assertEquals(0, val)
+        self.assertEqual(0, val)
         # - fail if topic is not registered by that node
         code, _, val = r.unregister('topic2', 'node2', 'http://node2:5678')
-        self.assertEquals(0, val)
+        self.assertEqual(0, val)
         # - fail if URI does not match
         code, _, val = r.unregister('topic2', 'node2', 'http://fakenode2:5678')
-        self.assertEquals(0, val)
+        self.assertEqual(0, val)
 
         # - unregister node2
         code, _, val = r.unregister('topic1', 'node1', 'http://node1:5678')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)
-        self.assert_('topic1' in r) # test contains
-        self.assert_(r.has_key('topic1')) 
-        self.assert_('topic1' in [k for k in r.iterkeys()])
-        self.assert_('topic2' in [k for k in r.iterkeys()])
-        self.assertEquals(['http://node2:5678'], r.get_apis('topic1'))
-        self.assertEquals([('node2', 'http://node2:5678')], r['topic1'])
-        self.failIf(not r) #test nonzero
-        self.assert_(['topic1', ['node2']] in r.get_state())
-        self.assert_(['topic2', ['node3']] in r.get_state())        
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)
+        self.assertTrue('topic1' in r) # test contains
+        self.assertTrue(r.has_key('topic1')) 
+        self.assertTrue('topic1' in [k for k in r.iterkeys()])
+        self.assertTrue('topic2' in [k for k in r.iterkeys()])
+        self.assertEqual(['http://node2:5678'], r.get_apis('topic1'))
+        self.assertEqual([('node2', 'http://node2:5678')], r['topic1'])
+        self.assertFalse(not r) #test nonzero
+        self.assertTrue(['topic1', ['node2']] in r.get_state())
+        self.assertTrue(['topic2', ['node3']] in r.get_state())        
 
         code, _, val = r.unregister('topic1', 'node2', 'http://node2:5678')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)
-        self.failIf('topic1' in r) # test contains
-        self.failIf(r.has_key('topic1')) 
-        self.assertEquals(['topic2'], [k for k in r.iterkeys()])
-        self.assertEquals([], r.get_apis('topic1'))
-        self.assertEquals([], r['topic1'])
-        self.failIf(not r) #test nonzero
-        self.assertEquals([['topic2', ['node3']]], r.get_state())
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)
+        self.assertFalse('topic1' in r) # test contains
+        self.assertFalse(r.has_key('topic1')) 
+        self.assertEqual(['topic2'], [k for k in r.iterkeys()])
+        self.assertEqual([], r.get_apis('topic1'))
+        self.assertEqual([], r['topic1'])
+        self.assertFalse(not r) #test nonzero
+        self.assertEqual([['topic2', ['node3']]], r.get_state())
 
         # clear out last reg
         code, _, val = r.unregister('topic2', 'node3', 'http://node3:5678')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)
-        self.failIf('topic2' in r) # test contains
-        self.assert_(not r)
-        self.assertEquals([], r.get_state())        
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)
+        self.assertFalse('topic2' in r) # test contains
+        self.assertTrue(not r)
+        self.assertEqual([], r.get_state())        
         
     def test_Registrations(self):
         import rosmaster.exceptions
@@ -268,7 +268,7 @@ class TestRosmasterRegistrations(unittest.TestCase):
                  Registrations.SERVICE,
                  Registrations.PARAM_SUBSCRIPTIONS]
         # test enums
-        self.assertEquals(4, len(set(types)))
+        self.assertEqual(4, len(set(types)))
         try:
             r = Registrations(-1)
             self.fail("Registrations accepted invalid type")
@@ -276,12 +276,12 @@ class TestRosmasterRegistrations(unittest.TestCase):
         
         for t in types:
             r = Registrations(t)
-            self.assertEquals(t, r.type)
-            self.assert_(not r) #test nonzero
-            self.failIf('topic1' in r) #test contains            
-            self.failIf(r.has_key('topic1')) #test has_key
-            self.failIf([k for k in r.iterkeys()]) #no keys
-            self.assertEquals(None, r.get_service_api('non-existent'))
+            self.assertEqual(t, r.type)
+            self.assertTrue(not r) #test nonzero
+            self.assertFalse('topic1' in r) #test contains            
+            self.assertFalse(r.has_key('topic1')) #test has_key
+            self.assertFalse([k for k in r.iterkeys()]) #no keys
+            self.assertEqual(None, r.get_service_api('non-existent'))
 
         # Test topic subs
         r = Registrations(Registrations.TOPIC_SUBSCRIPTIONS)
@@ -298,66 +298,66 @@ class TestRosmasterRegistrations(unittest.TestCase):
         from rosmaster.registrations import Registrations, RegistrationManager
         rm = RegistrationManager(ThreadPoolMock())
         
-        self.assertEquals(None, rm.get_node('caller1'))
+        self.assertEqual(None, rm.get_node('caller1'))
 
         # do an unregister first, before service_api is initialized
         code, msg, val = rm.unregister_service('s1', 'caller1', 'rosrpc://one:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)        
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)        
         
         rm.register_service('s1', 'caller1', 'http://one:1234', 'rosrpc://one:1234')
-        self.assert_(rm.services.has_key('s1'))
-        self.assertEquals('rosrpc://one:1234', rm.services.get_service_api('s1')) 
-        self.assertEquals('http://one:1234', rm.get_node('caller1').api)
-        self.assertEquals([['s1', ['caller1']]], rm.services.get_state())
+        self.assertTrue(rm.services.has_key('s1'))
+        self.assertEqual('rosrpc://one:1234', rm.services.get_service_api('s1')) 
+        self.assertEqual('http://one:1234', rm.get_node('caller1').api)
+        self.assertEqual([['s1', ['caller1']]], rm.services.get_state())
         
         # - verify that changed caller_api updates ref
         rm.register_service('s1', 'caller1', 'http://oneB:1234', 'rosrpc://one:1234')
-        self.assert_(rm.services.has_key('s1'))
-        self.assertEquals('rosrpc://one:1234', rm.services.get_service_api('s1'))        
-        self.assertEquals('http://oneB:1234', rm.get_node('caller1').api)
-        self.assertEquals([['s1', ['caller1']]], rm.services.get_state())
+        self.assertTrue(rm.services.has_key('s1'))
+        self.assertEqual('rosrpc://one:1234', rm.services.get_service_api('s1'))        
+        self.assertEqual('http://oneB:1234', rm.get_node('caller1').api)
+        self.assertEqual([['s1', ['caller1']]], rm.services.get_state())
         
         # - verify that changed service_api updates ref
         rm.register_service('s1', 'caller1', 'http://oneB:1234', 'rosrpc://oneB:1234')
-        self.assert_(rm.services.has_key('s1'))
-        self.assertEquals('rosrpc://oneB:1234', rm.services.get_service_api('s1'))        
-        self.assertEquals('http://oneB:1234', rm.get_node('caller1').api)
-        self.assertEquals([['s1', ['caller1']]], rm.services.get_state())
+        self.assertTrue(rm.services.has_key('s1'))
+        self.assertEqual('rosrpc://oneB:1234', rm.services.get_service_api('s1'))        
+        self.assertEqual('http://oneB:1234', rm.get_node('caller1').api)
+        self.assertEqual([['s1', ['caller1']]], rm.services.get_state())
         
         rm.register_service('s2', 'caller2', 'http://two:1234', 'rosrpc://two:1234')
-        self.assertEquals('http://two:1234', rm.get_node('caller2').api)
+        self.assertEqual('http://two:1234', rm.get_node('caller2').api)
 
         # - unregister should be noop if service api does not match
         code, msg, val = rm.unregister_service('s2', 'caller2', 'rosrpc://b:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)        
-        self.assert_(rm.services.has_key('s2'))
-        self.assertEquals('http://two:1234', rm.get_node('caller2').api)        
-        self.assertEquals('rosrpc://two:1234', rm.services.get_service_api('s2'))
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)        
+        self.assertTrue(rm.services.has_key('s2'))
+        self.assertEqual('http://two:1234', rm.get_node('caller2').api)        
+        self.assertEqual('rosrpc://two:1234', rm.services.get_service_api('s2'))
         
         # - unregister should be noop if service is unknown
         code, msg, val = rm.unregister_service('unknown', 'caller2', 'rosrpc://two:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)        
-        self.assert_(rm.services.has_key('s2'))
-        self.assertEquals('http://two:1234', rm.get_node('caller2').api)        
-        self.assertEquals('rosrpc://two:1234', rm.services.get_service_api('s2'))
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)        
+        self.assertTrue(rm.services.has_key('s2'))
+        self.assertEqual('http://two:1234', rm.get_node('caller2').api)        
+        self.assertEqual('rosrpc://two:1234', rm.services.get_service_api('s2'))
 
         # - unregister should clear all knowledge of caller2
         code,msg, val = rm.unregister_service('s2', 'caller2', 'rosrpc://two:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)        
-        self.assert_(rm.services.has_key('s1')) 
-        self.failIf(rm.services.has_key('s2'))        
-        self.assertEquals(None, rm.get_node('caller2'))
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)        
+        self.assertTrue(rm.services.has_key('s1')) 
+        self.assertFalse(rm.services.has_key('s2'))        
+        self.assertEqual(None, rm.get_node('caller2'))
 
         code, msg, val = rm.unregister_service('s1', 'caller1', 'rosrpc://oneB:1234')
-        self.assertEquals(1, code)        
-        self.assertEquals(1, val)        
-        self.assert_(not rm.services.__nonzero__())
-        self.failIf(rm.services.has_key('s1'))        
-        self.assertEquals(None, rm.get_node('caller1'))        
+        self.assertEqual(1, code)        
+        self.assertEqual(1, val)        
+        self.assertTrue(not rm.services.__nonzero__())
+        self.assertFalse(rm.services.has_key('s1'))        
+        self.assertEqual(None, rm.get_node('caller1'))        
 
     def test_RegistrationManager_topic_pub(self):
         from rosmaster.registrations import Registrations, RegistrationManager
@@ -374,55 +374,55 @@ class TestRosmasterRegistrations(unittest.TestCase):
         self.subtest_RegistrationManager(rm, rm.param_subscribers, rm.register_param_subscriber, rm.unregister_param_subscriber)
         
     def subtest_RegistrationManager(self, rm, r, register, unregister):
-        self.assertEquals(None, rm.get_node('caller1'))
+        self.assertEqual(None, rm.get_node('caller1'))
 
         register('key1', 'caller1', 'http://one:1234')
-        self.assert_(r.has_key('key1'))
-        self.assertEquals('http://one:1234', rm.get_node('caller1').api)
-        self.assertEquals([['key1', ['caller1']]], r.get_state())
+        self.assertTrue(r.has_key('key1'))
+        self.assertEqual('http://one:1234', rm.get_node('caller1').api)
+        self.assertEqual([['key1', ['caller1']]], r.get_state())
         
         # - verify that changed caller_api updates ref
         register('key1', 'caller1', 'http://oneB:1234')
-        self.assert_(r.has_key('key1'))
-        self.assertEquals('http://oneB:1234', rm.get_node('caller1').api)
-        self.assertEquals([['key1', ['caller1']]], r.get_state())
+        self.assertTrue(r.has_key('key1'))
+        self.assertEqual('http://oneB:1234', rm.get_node('caller1').api)
+        self.assertEqual([['key1', ['caller1']]], r.get_state())
         
         register('key2', 'caller2', 'http://two:1234')
-        self.assertEquals('http://two:1234', rm.get_node('caller2').api)
+        self.assertEqual('http://two:1234', rm.get_node('caller2').api)
 
         # - unregister should be noop if caller api does not match
         code, msg, val = unregister('key2', 'caller2', 'http://b:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)        
-        self.assertEquals('http://two:1234', rm.get_node('caller2').api)        
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)        
+        self.assertEqual('http://two:1234', rm.get_node('caller2').api)        
         
         # - unregister should be noop if key is unknown
         code, msg, val = unregister('unknown', 'caller2', 'http://two:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)        
-        self.assert_(r.has_key('key2'))
-        self.assertEquals('http://two:1234', rm.get_node('caller2').api)        
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)        
+        self.assertTrue(r.has_key('key2'))
+        self.assertEqual('http://two:1234', rm.get_node('caller2').api)        
 
         # - unregister should be noop if unknown node
         code, msg, val = rm.unregister_publisher('key2', 'unknown', 'http://unknown:1')
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)        
-        self.assert_(r.has_key('key2'))
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)        
+        self.assertTrue(r.has_key('key2'))
 
         # - unregister should clear all knowledge of caller2
         code,msg, val = unregister('key2', 'caller2', 'http://two:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)        
-        self.assert_(r.has_key('key1')) 
-        self.failIf(r.has_key('key2'))        
-        self.assertEquals(None, rm.get_node('caller2'))
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)        
+        self.assertTrue(r.has_key('key1')) 
+        self.assertFalse(r.has_key('key2'))        
+        self.assertEqual(None, rm.get_node('caller2'))
 
         code, msg, val = unregister('key1', 'caller1', 'http://oneB:1234')
-        self.assertEquals(1, code)        
-        self.assertEquals(1, val)        
-        self.assert_(not r.__nonzero__())
-        self.failIf(r.has_key('key1'))        
-        self.assertEquals(None, rm.get_node('caller1'))        
+        self.assertEqual(1, code)        
+        self.assertEqual(1, val)        
+        self.assertTrue(not r.__nonzero__())
+        self.assertFalse(r.has_key('key1'))        
+        self.assertEqual(None, rm.get_node('caller1'))        
 
     def test_RegistrationManager_base(self):
         import rosmaster.exceptions
@@ -430,15 +430,15 @@ class TestRosmasterRegistrations(unittest.TestCase):
         threadpool = ThreadPoolMock()
 
         rm = RegistrationManager(threadpool)
-        self.assert_(isinstance(rm.services, Registrations))
-        self.assertEquals(Registrations.SERVICE, rm.services.type)
-        self.assert_(isinstance(rm.param_subscribers, Registrations))
-        self.assertEquals(Registrations.PARAM_SUBSCRIPTIONS, rm.param_subscribers.type)
-        self.assert_(isinstance(rm.subscribers, Registrations))
-        self.assertEquals(Registrations.TOPIC_SUBSCRIPTIONS, rm.subscribers.type)
-        self.assert_(isinstance(rm.subscribers, Registrations))
-        self.assertEquals(Registrations.TOPIC_PUBLICATIONS, rm.publishers.type)
-        self.assert_(isinstance(rm.publishers, Registrations))
+        self.assertTrue(isinstance(rm.services, Registrations))
+        self.assertEqual(Registrations.SERVICE, rm.services.type)
+        self.assertTrue(isinstance(rm.param_subscribers, Registrations))
+        self.assertEqual(Registrations.PARAM_SUBSCRIPTIONS, rm.param_subscribers.type)
+        self.assertTrue(isinstance(rm.subscribers, Registrations))
+        self.assertEqual(Registrations.TOPIC_SUBSCRIPTIONS, rm.subscribers.type)
+        self.assertTrue(isinstance(rm.subscribers, Registrations))
+        self.assertEqual(Registrations.TOPIC_PUBLICATIONS, rm.publishers.type)
+        self.assertTrue(isinstance(rm.publishers, Registrations))
 
         #test auto-clearing of registrations if node API changes
         rm.register_publisher('pub1', 'caller1', 'http://one:1')
@@ -451,82 +451,82 @@ class TestRosmasterRegistrations(unittest.TestCase):
         rm.register_param_subscriber('p1', 'caller2', 'http://two:1')
         rm.register_param_subscriber('p1', 'caller3', 'http://three:1')
         rm.register_service('s1', 'caller1', 'http://one:1', 'rosrpc://one:1')
-        self.assertEquals('http://one:1', rm.get_node('caller1').api)
-        self.assertEquals('http://two:1', rm.get_node('caller2').api)
-        self.assertEquals('http://three:1', rm.get_node('caller3').api)        
+        self.assertEqual('http://one:1', rm.get_node('caller1').api)
+        self.assertEqual('http://two:1', rm.get_node('caller2').api)
+        self.assertEqual('http://three:1', rm.get_node('caller3').api)        
 
         # - first, make sure that changing rosrpc URI does not erase state
         rm.register_service('s1', 'caller1', 'http://one:1', 'rosrpc://oneB:1')
         n = rm.get_node('caller1')
-        self.assertEquals(['pub1'], n.topic_publications)
-        self.assertEquals(['sub1'], n.topic_subscriptions)
-        self.assertEquals(['p1'], n.param_subscriptions)                
-        self.assertEquals(['s1'], n.services)
-        self.assert_('http://one:1' in rm.publishers.get_apis('pub1'))
-        self.assert_('http://one:1' in rm.subscribers.get_apis('sub1'))
-        self.assert_('http://one:1' in rm.param_subscribers.get_apis('p1'))
-        self.assert_('http://one:1' in rm.services.get_apis('s1'))
+        self.assertEqual(['pub1'], n.topic_publications)
+        self.assertEqual(['sub1'], n.topic_subscriptions)
+        self.assertEqual(['p1'], n.param_subscriptions)                
+        self.assertEqual(['s1'], n.services)
+        self.assertTrue('http://one:1' in rm.publishers.get_apis('pub1'))
+        self.assertTrue('http://one:1' in rm.subscribers.get_apis('sub1'))
+        self.assertTrue('http://one:1' in rm.param_subscribers.get_apis('p1'))
+        self.assertTrue('http://one:1' in rm.services.get_apis('s1'))
 
         # - also, make sure unregister does not erase state if API changed
         rm.unregister_publisher('pub1', 'caller1', 'http://not:1')
-        self.assert_('http://one:1' in rm.publishers.get_apis('pub1'))
+        self.assertTrue('http://one:1' in rm.publishers.get_apis('pub1'))
         rm.unregister_subscriber('sub1', 'caller1', 'http://not:1')
-        self.assert_('http://one:1' in rm.subscribers.get_apis('sub1'))
+        self.assertTrue('http://one:1' in rm.subscribers.get_apis('sub1'))
         rm.unregister_param_subscriber('p1', 'caller1', 'http://not:1')
-        self.assert_('http://one:1' in rm.param_subscribers.get_apis('p1'))
+        self.assertTrue('http://one:1' in rm.param_subscribers.get_apis('p1'))
         rm.unregister_service('sub1', 'caller1', 'rosrpc://not:1')
-        self.assert_('http://one:1' in rm.services.get_apis('s1'))
+        self.assertTrue('http://one:1' in rm.services.get_apis('s1'))
         
         
         # erase caller1 sub/srvs/params via register_publisher
         rm.register_publisher('pub1', 'caller1', 'http://newone:1')
-        self.assertEquals('http://newone:1', rm.get_node('caller1').api)        
+        self.assertEqual('http://newone:1', rm.get_node('caller1').api)        
         # - check node ref
         n = rm.get_node('caller1')
-        self.assertEquals(['pub1'], n.topic_publications)
-        self.assertEquals([], n.services)
-        self.assertEquals([], n.topic_subscriptions)
-        self.assertEquals([], n.param_subscriptions)
+        self.assertEqual(['pub1'], n.topic_publications)
+        self.assertEqual([], n.services)
+        self.assertEqual([], n.topic_subscriptions)
+        self.assertEqual([], n.param_subscriptions)
         # - checks publishers
-        self.assert_('http://newone:1' in rm.publishers.get_apis('pub1'))
+        self.assertTrue('http://newone:1' in rm.publishers.get_apis('pub1'))
         # - checks subscribers
-        self.assert_(rm.subscribers.has_key('sub1'))
-        self.failIf('http://one:1' in rm.subscribers.get_apis('sub1'))
+        self.assertTrue(rm.subscribers.has_key('sub1'))
+        self.assertFalse('http://one:1' in rm.subscribers.get_apis('sub1'))
         # - checks param subscribers
-        self.assert_(rm.param_subscribers.has_key('p1'))
-        self.failIf('http://one:1' in rm.param_subscribers.get_apis('p1'))
+        self.assertTrue(rm.param_subscribers.has_key('p1'))
+        self.assertFalse('http://one:1' in rm.param_subscribers.get_apis('p1'))
 
         # erase caller2 pub/sub/params via register_service
         # - initial state
-        self.assert_('http://two:1' in rm.publishers.get_apis('pub1'))
-        self.assert_('http://two:1' in rm.subscribers.get_apis('sub1'))
-        self.assert_('http://two:1' in rm.param_subscribers.get_apis('p1'))
+        self.assertTrue('http://two:1' in rm.publishers.get_apis('pub1'))
+        self.assertTrue('http://two:1' in rm.subscribers.get_apis('sub1'))
+        self.assertTrue('http://two:1' in rm.param_subscribers.get_apis('p1'))
         # - change ownership of s1 to caller2
         rm.register_service('s1', 'caller2', 'http://two:1', 'rosrpc://two:1')
-        self.assert_('http://two:1' in rm.services.get_apis('s1'))
-        self.assert_('http://two:1' in rm.publishers.get_apis('pub1'))
-        self.assert_('http://two:1' in rm.subscribers.get_apis('sub1'))
-        self.assert_('http://two:1' in rm.param_subscribers.get_apis('p1'))
+        self.assertTrue('http://two:1' in rm.services.get_apis('s1'))
+        self.assertTrue('http://two:1' in rm.publishers.get_apis('pub1'))
+        self.assertTrue('http://two:1' in rm.subscribers.get_apis('sub1'))
+        self.assertTrue('http://two:1' in rm.param_subscribers.get_apis('p1'))
         
         rm.register_service('s1', 'caller2', 'http://newtwo:1', 'rosrpc://newtwo:1')
-        self.assertEquals('http://newone:1', rm.get_node('caller1').api)        
+        self.assertEqual('http://newone:1', rm.get_node('caller1').api)        
         # - check node ref
         n = rm.get_node('caller2')
-        self.assertEquals([], n.topic_publications)
-        self.assertEquals(['s1'], n.services)
-        self.assertEquals([], n.topic_subscriptions)
-        self.assertEquals([], n.param_subscriptions)
+        self.assertEqual([], n.topic_publications)
+        self.assertEqual(['s1'], n.services)
+        self.assertEqual([], n.topic_subscriptions)
+        self.assertEqual([], n.param_subscriptions)
         # - checks publishers
-        self.assert_(rm.publishers.has_key('pub1'))
-        self.failIf('http://two:1' in rm.publishers.get_apis('pub1'))
+        self.assertTrue(rm.publishers.has_key('pub1'))
+        self.assertFalse('http://two:1' in rm.publishers.get_apis('pub1'))
         # - checks subscribers
-        self.assert_(rm.subscribers.has_key('sub1'))
-        self.failIf('http://two:1' in rm.subscribers.get_apis('sub1'))
-        self.assertEquals([['sub1', ['caller3']]], rm.subscribers.get_state())
+        self.assertTrue(rm.subscribers.has_key('sub1'))
+        self.assertFalse('http://two:1' in rm.subscribers.get_apis('sub1'))
+        self.assertEqual([['sub1', ['caller3']]], rm.subscribers.get_state())
         # - checks param subscribers
-        self.assert_(rm.param_subscribers.has_key('p1'))
-        self.failIf('http://two:1' in rm.param_subscribers.get_apis('p1'))
-        self.assertEquals([['p1', ['caller3']]], rm.param_subscribers.get_state())
+        self.assertTrue(rm.param_subscribers.has_key('p1'))
+        self.assertFalse('http://two:1' in rm.param_subscribers.get_apis('p1'))
+        self.assertEqual([['p1', ['caller3']]], rm.param_subscribers.get_state())
 
         
     def test_Registrations_unregister_all(self):
@@ -538,54 +538,54 @@ class TestRosmasterRegistrations(unittest.TestCase):
             r.register(k, 'node1', 'http://node1:5678')
         r.register('topic2', 'node2', 'http://node2:5678')
         r.unregister_all('node1')
-        self.failIf(not r)
+        self.assertFalse(not r)
         for k in ['topic1', 'topic1b', 'topic1c', 'topic1d']:        
-            self.failIf(r.has_key(k))
-        self.assertEquals(['topic2'], [k for k in r.iterkeys()])
+            self.assertFalse(r.has_key(k))
+        self.assertEqual(['topic2'], [k for k in r.iterkeys()])
         
         r = Registrations(Registrations.TOPIC_PUBLICATIONS)        
         for k in ['topic1', 'topic1b', 'topic1c', 'topic1d']:        
             r.register(k, 'node1', 'http://node1:5678')
         r.register('topic2', 'node2', 'http://node2:5678')
         r.unregister_all('node1')
-        self.failIf(not r)
+        self.assertFalse(not r)
         for k in ['topic1', 'topic1b', 'topic1c', 'topic1d']:        
-            self.failIf(r.has_key(k))
-        self.assertEquals(['topic2'], [k for k in r.iterkeys()])
+            self.assertFalse(r.has_key(k))
+        self.assertEqual(['topic2'], [k for k in r.iterkeys()])
 
         r = Registrations(Registrations.PARAM_SUBSCRIPTIONS)        
         r.register('param2', 'node2', 'http://node2:5678')
         for k in ['param1', 'param1b', 'param1c', 'param1d']:
             r.register(k, 'node1', 'http://node1:5678')
         r.unregister_all('node1')
-        self.failIf(not r)
+        self.assertFalse(not r)
         for k in ['param1', 'param1b', 'param1c', 'param1d']:
-            self.failIf(r.has_key(k))
-        self.assertEquals(['param2'], [k for k in r.iterkeys()])
+            self.assertFalse(r.has_key(k))
+        self.assertEqual(['param2'], [k for k in r.iterkeys()])
         
         r = Registrations(Registrations.SERVICE)        
         for k in ['service1', 'service1b', 'service1c', 'service1d']:
             r.register(k, 'node1', 'http://node1:5678', 'rosrpc://node1:1234')
         r.register('service2', 'node2', 'http://node2:5678', 'rosrpc://node2:1234')
         r.unregister_all('node1')
-        self.failIf(not r)
+        self.assertFalse(not r)
         for k in ['service1', 'service1b', 'service1c', 'service1d']:
-            self.failIf(r.has_key(k))
-            self.assertEquals(None, r.get_service_api(k))
-        self.assertEquals(['service2'], [k for k in r.iterkeys()])
-        self.assertEquals('rosrpc://node2:1234', r.get_service_api('service2'))
+            self.assertFalse(r.has_key(k))
+            self.assertEqual(None, r.get_service_api(k))
+        self.assertEqual(['service2'], [k for k in r.iterkeys()])
+        self.assertEqual('rosrpc://node2:1234', r.get_service_api('service2'))
 
     def _subtest_Registrations_services(self, r):
         import rosmaster.exceptions
 
         # call methods that use service_api_map, make sure they are guarded against lazy-init
-        self.assertEquals(None, r.get_service_api('s1'))
+        self.assertEqual(None, r.get_service_api('s1'))
         r.unregister_all('node1')
 
         # do an unregister first, before service_api is initialized
         code, msg, val = r.unregister('s1', 'caller1', None, 'rosrpc://one:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(0, val)        
+        self.assertEqual(1, code)
+        self.assertEqual(0, val)        
 
         try:
             r.register('service1', 'node1', 'http://node1:5678')
@@ -594,35 +594,35 @@ class TestRosmasterRegistrations(unittest.TestCase):
         
         r.register('service1', 'node1', 'http://node1:5678', 'rosrpc://node1:1234')
         
-        self.assert_('service1' in r) # test contains
-        self.assert_(r.has_key('service1')) # test contains
-        self.assertEquals(['service1'], [k for k in r.iterkeys()])
-        self.assertEquals(['http://node1:5678'], r.get_apis('service1'))
-        self.assertEquals('rosrpc://node1:1234', r.get_service_api('service1'))
-        self.assertEquals([('node1', 'http://node1:5678')], r['service1'])
-        self.failIf(not r) #test nonzero
-        self.assertEquals([['service1', ['node1']]], r.get_state())
+        self.assertTrue('service1' in r) # test contains
+        self.assertTrue(r.has_key('service1')) # test contains
+        self.assertEqual(['service1'], [k for k in r.iterkeys()])
+        self.assertEqual(['http://node1:5678'], r.get_apis('service1'))
+        self.assertEqual('rosrpc://node1:1234', r.get_service_api('service1'))
+        self.assertEqual([('node1', 'http://node1:5678')], r['service1'])
+        self.assertFalse(not r) #test nonzero
+        self.assertEqual([['service1', ['node1']]], r.get_state())
 
         r.register('service1', 'node2', 'http://node2:5678', 'rosrpc://node2:1234')
-        self.assertEquals(['service1'], [k for k in r.iterkeys()])
-        self.assertEquals('rosrpc://node2:1234', r.get_service_api('service1'))
-        self.assertEquals(['http://node2:5678'], r.get_apis('service1'))
-        self.assertEquals([('node2', 'http://node2:5678')], r['service1'])
-        self.assertEquals([['service1', ['node2']]], r.get_state())
+        self.assertEqual(['service1'], [k for k in r.iterkeys()])
+        self.assertEqual('rosrpc://node2:1234', r.get_service_api('service1'))
+        self.assertEqual(['http://node2:5678'], r.get_apis('service1'))
+        self.assertEqual([('node2', 'http://node2:5678')], r['service1'])
+        self.assertEqual([['service1', ['node2']]], r.get_state())
 
         # register a second service
         r.register('service2', 'node3', 'http://node3:5678', 'rosrpc://node3:1234')
-        self.assertEquals('rosrpc://node3:1234', r.get_service_api('service2'))
-        self.assertEquals(2, len(r.get_state()))
-        self.assert_(['service2', ['node3']] in r.get_state(), r.get_state())
-        self.assert_(['service1', ['node2']] in r.get_state())
+        self.assertEqual('rosrpc://node3:1234', r.get_service_api('service2'))
+        self.assertEqual(2, len(r.get_state()))
+        self.assertTrue(['service2', ['node3']] in r.get_state(), r.get_state())
+        self.assertTrue(['service1', ['node2']] in r.get_state())
         
         # register a third service, second service for node2
         r.register('service1b', 'node2', 'http://node2:5678', 'rosrpc://node2:1234')
-        self.assertEquals(3, len(r.get_state()))
-        self.assert_(['service2', ['node3']] in r.get_state())
-        self.assert_(['service1b', ['node2']] in r.get_state())
-        self.assert_(['service1', ['node2']] in r.get_state())
+        self.assertEqual(3, len(r.get_state()))
+        self.assertTrue(['service2', ['node3']] in r.get_state())
+        self.assertTrue(['service1b', ['node2']] in r.get_state())
+        self.assertTrue(['service1', ['node2']] in r.get_state())
         
         # Unregister
         try:
@@ -632,48 +632,48 @@ class TestRosmasterRegistrations(unittest.TestCase):
         
         # - fail if service is not known
         code, _, val = r.unregister('unknown', 'node2', 'http://node2:5678', 'rosprc://node2:1234')
-        self.assertEquals(0, val)
+        self.assertEqual(0, val)
         # - fail if node is not registered
         code, _, val = r.unregister('service1', 'node3', 'http://node3:5678', 'rosrpc://node3:1234')
-        self.assertEquals(0, val)
+        self.assertEqual(0, val)
         # - fail if service API is different
         code, _, val = r.unregister('service1', 'node2', 'http://node2b:5678', 'rosrpc://node3:1234')
-        self.assertEquals(0, val)
+        self.assertEqual(0, val)
 
         # - unregister service2
         code, _, val = r.unregister('service2', 'node3', 'http://node3:5678', 'rosrpc://node3:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)
-        self.failIf('service2' in r) # test contains
-        self.failIf(r.has_key('service2')) 
-        self.assert_('service1' in [k for k in r.iterkeys()])
-        self.assert_('service1b' in [k for k in r.iterkeys()])
-        self.assertEquals([], r.get_apis('service2'))
-        self.assertEquals([], r['service2'])
-        self.failIf(not r) #test nonzero
-        self.assertEquals(2, len(r.get_state()))
-        self.failIf(['service2', ['node3']] in r.get_state())
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)
+        self.assertFalse('service2' in r) # test contains
+        self.assertFalse(r.has_key('service2')) 
+        self.assertTrue('service1' in [k for k in r.iterkeys()])
+        self.assertTrue('service1b' in [k for k in r.iterkeys()])
+        self.assertEqual([], r.get_apis('service2'))
+        self.assertEqual([], r['service2'])
+        self.assertFalse(not r) #test nonzero
+        self.assertEqual(2, len(r.get_state()))
+        self.assertFalse(['service2', ['node3']] in r.get_state())
         
         # - unregister node2
         code, _, val = r.unregister('service1', 'node2', 'http://node2:5678', 'rosrpc://node2:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)
-        self.failIf('service1' in r) # test contains
-        self.failIf(r.has_key('service1')) 
-        self.assertEquals(['service1b'], [k for k in r.iterkeys()])
-        self.assertEquals([], r.get_apis('service1'))
-        self.assertEquals([], r['service1'])
-        self.failIf(not r) #test nonzero
-        self.assertEquals([['service1b', ['node2']]], r.get_state())
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)
+        self.assertFalse('service1' in r) # test contains
+        self.assertFalse(r.has_key('service1')) 
+        self.assertEqual(['service1b'], [k for k in r.iterkeys()])
+        self.assertEqual([], r.get_apis('service1'))
+        self.assertEqual([], r['service1'])
+        self.assertFalse(not r) #test nonzero
+        self.assertEqual([['service1b', ['node2']]], r.get_state())
 
         code, _, val = r.unregister('service1b', 'node2', 'http://node2:5678', 'rosrpc://node2:1234')
-        self.assertEquals(1, code)
-        self.assertEquals(1, val)
-        self.failIf('service1' in r) # test contains
-        self.failIf(r.has_key('service1')) 
-        self.assertEquals([], [k for k in r.iterkeys()])
-        self.assertEquals([], r.get_apis('service1'))
-        self.assertEquals([], r['service1'])
-        self.assert_(not r) #test nonzero
-        self.assertEquals([], r.get_state())
+        self.assertEqual(1, code)
+        self.assertEqual(1, val)
+        self.assertFalse('service1' in r) # test contains
+        self.assertFalse(r.has_key('service1')) 
+        self.assertEqual([], [k for k in r.iterkeys()])
+        self.assertEqual([], r.get_apis('service1'))
+        self.assertEqual([], r['service1'])
+        self.assertTrue(not r) #test nonzero
+        self.assertEqual([], r.get_state())
         
diff --git a/test/test_rosmaster_validators.py b/test/test_rosmaster_validators.py
index 7d6001692..70cfff38e 100644
--- a/test/test_rosmaster_validators.py
+++ b/test/test_rosmaster_validators.py
@@ -40,7 +40,7 @@ class TestRosmasterValidators(unittest.TestCase):
     def test_ParameterInvalid(self):
         # not really testing anything here other than typos
         from rosmaster.validators import ParameterInvalid
-        self.assert_(isinstance(ParameterInvalid('param'), Exception))
+        self.assertTrue(isinstance(ParameterInvalid('param'), Exception))
         
     def test_validators(self):
         from rosmaster.validators import ParameterInvalid
@@ -55,7 +55,7 @@ class TestRosmasterValidators(unittest.TestCase):
                 try:
                     non_empty('param-name-foo')(i, context)
                 except ParameterInvalid as e:
-                    self.assert_('param-name-foo' in str(e))
+                    self.assertTrue('param-name-foo' in str(e))
 
             from rosmaster.validators import non_empty_str
             valid = ['foo', 'f', u'f']
@@ -66,7 +66,7 @@ class TestRosmasterValidators(unittest.TestCase):
                 try:
                     non_empty_str('param-name-bar')(i, context)
                 except ParameterInvalid as e:
-                    self.assert_('param-name-bar' in str(e))
+                    self.assertTrue('param-name-bar' in str(e))
                     
             from rosmaster.validators import not_none
 
@@ -78,5 +78,5 @@ class TestRosmasterValidators(unittest.TestCase):
                 try:
                     not_none('param-name-charlie')(i, context)
                 except ParameterInvalid as e:
-                    self.assert_('param-name-charlie' in str(e))
+                    self.assertTrue('param-name-charlie' in str(e))
                 
