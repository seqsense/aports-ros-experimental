diff --git a/test/test_rosmsg.py b/test/test_rosmsg.py
index 2b5b65196..06227d57a 100644
--- a/test/test_rosmsg.py
+++ b/test/test_rosmsg.py
@@ -60,10 +60,10 @@ class TestRosmsg(unittest.TestCase):
     def test_fullusage(self):
         from rosmsg import MODE_MSG
         text = rosmsg.fullusage(MODE_MSG)
-        self.assert_("Commands" in text)
+        self.assertTrue("Commands" in text)
         cmds = ['show', 'md5', 'package', 'packages']
         for c in cmds:
-            self.assert_(c in text)
+            self.assertTrue(c in text)
 
     def test_get_msg_text(self):
         d = get_test_path()
@@ -79,8 +79,8 @@ class TestRosmsg(unittest.TestCase):
             text_raw = f.read()
 
         type_ = test_message_package+'/'+t
-        self.assertEquals(text, rosmsg.get_msg_text(type_, raw=False))
-        self.assertEquals(text_raw, rosmsg.get_msg_text(type_, raw=True))
+        self.assertEqual(text, rosmsg.get_msg_text(type_, raw=False))
+        self.assertEqual(text_raw, rosmsg.get_msg_text(type_, raw=True))
             
         # test recursive types
         t = 'DiagnosticStatus'
@@ -90,8 +90,8 @@ class TestRosmsg(unittest.TestCase):
             text_raw = f.read()
         type_ = test_message_package+'/'+t
         
-        self.assertEquals(text, rosmsg.get_msg_text(type_, raw=False))
-        self.assertEquals(text_raw, rosmsg.get_msg_text(type_, raw=True))
+        self.assertEqual(text, rosmsg.get_msg_text(type_, raw=False))
+        self.assertEqual(text_raw, rosmsg.get_msg_text(type_, raw=True))
 
     def test_iterate_packages(self):
         from rosmsg import iterate_packages, MODE_MSG, MODE_SRV
@@ -119,7 +119,7 @@ class TestRosmsg(unittest.TestCase):
 
         # test msgs
         l = rosmsg.list_types('rospy', mode='.msg')
-        self.assertEquals([], l)
+        self.assertEqual([], l)
         l = rosmsg.list_types('diagnostic_msgs', mode='.msg')
         for t in ['diagnostic_msgs/DiagnosticArray',
                   'diagnostic_msgs/DiagnosticStatus',
@@ -127,7 +127,7 @@ class TestRosmsg(unittest.TestCase):
             assert t in l
         
         l = rosmsg.list_types('rospy', mode='.srv')
-        self.assertEquals([], l)        
+        self.assertEqual([], l)        
         l = rosmsg.list_types('diagnostic_msgs', mode='.srv')
         for t in ['diagnostic_msgs/AddDiagnostics', 'diagnostic_msgs/SelfTest']:
             assert t in l
@@ -146,8 +146,8 @@ class TestRosmsg(unittest.TestCase):
                 text_raw = f.read()
                 
             type_ = test_srv_package+'/'+t
-            self.assertEquals(text, rosmsg.get_srv_text(type_, raw=False))
-            self.assertEquals(text_raw, rosmsg.get_srv_text(type_, raw=True))
+            self.assertEqual(text, rosmsg.get_srv_text(type_, raw=False))
+            self.assertEqual(text_raw, rosmsg.get_srv_text(type_, raw=True))
 
     def test_rosmsg_cmd_packages(self):
         from rosmsg import rosmsg_cmd_packages, MODE_MSG, MODE_SRV
diff --git a/test/test_rosmsg_command_line.py b/test/test_rosmsg_command_line.py
index 18a1473d0..f7d743820 100644
--- a/test/test_rosmsg_command_line.py
+++ b/test/test_rosmsg_command_line.py
@@ -55,17 +55,17 @@ class TestRosmsg(unittest.TestCase):
         for cmd in ['rosmsg', 'rossrv']:
             glob_cmd=[sys.executable, os.path.join(_SCRIPT_FOLDER, cmd)]
             output = Popen(glob_cmd, stdout=PIPE, env=self.new_environ).communicate()[0].decode()
-            self.assert_('Commands' in output)
+            self.assertTrue('Commands' in output)
             output = Popen(glob_cmd+['-h'], stdout=PIPE, env=self.new_environ).communicate()[0].decode()
-            self.assert_('Commands' in output)
-            self.assert_('Traceback' not in output)
+            self.assertTrue('Commands' in output)
+            self.assertTrue('Traceback' not in output)
             for c in sub:
-                self.assert_("%s %s"%(cmd, c) in output, "%s %s"%(cmd, c) + " not in "+ output + " of " + str(glob_cmd))
+                self.assertTrue("%s %s"%(cmd, c) in output, "%s %s"%(cmd, c) + " not in "+ output + " of " + str(glob_cmd))
                 
             for c in sub:
                 output = Popen(glob_cmd + [c, '-h'], stdout=PIPE, env=self.new_environ).communicate()[0].decode()
-                self.assert_('Usage' in output)
-                self.assert_("%s %s"%(cmd, c) in output, output)
+                self.assertTrue('Usage' in output)
+                self.assertTrue("%s %s"%(cmd, c) in output, output)
             
     def test_cmd_packages(self):
         # - single line
@@ -74,37 +74,37 @@ class TestRosmsg(unittest.TestCase):
         output2 = Popen(['rosmsg', 'packages'], stdout=PIPE).communicate()[0].decode()
         l1 = [x for x in output1.split() if x]
         l2 = [x.strip() for x in output2.split('\n') if x.strip()]
-        self.assertEquals(l1, l2)
+        self.assertEqual(l1, l2)
         for p in ['std_msgs', 'diagnostic_msgs']:
-            self.assert_(p in l1)
+            self.assertTrue(p in l1)
         for p in ['std_srvs', 'rosmsg']:
-            self.assert_(p not in l1)
+            self.assertTrue(p not in l1)
 
         output1 = Popen(['rossrv', 'packages', '-s'], stdout=PIPE).communicate()[0].decode()
         output2 = Popen(['rossrv', 'packages'], stdout=PIPE).communicate()[0].decode()
         l1 = [x for x in output1.split() if x]
         l2 = [x.strip() for x in output2.split('\n') if x.strip()]
-        self.assertEquals(l1, l2)
+        self.assertEqual(l1, l2)
         for p in ['std_srvs', 'diagnostic_msgs']:
-            self.assert_(p in l1)
+            self.assertTrue(p in l1)
         for p in ['std_msgs', 'rospy']:
-            self.assert_(p not in l1)
+            self.assertTrue(p not in l1)
 
     def test_cmd_list(self):
         # - multi-line
         output1 = Popen([sys.executable, os.path.join(_SCRIPT_FOLDER,'rosmsg'), 'list'], stdout=PIPE).communicate()[0].decode()
         l1 = [x.strip() for x in output1.split('\n') if x.strip()]
         for p in ['std_msgs/String', 'diagnostic_msgs/DiagnosticArray']:
-            self.assert_(p in l1)
+            self.assertTrue(p in l1)
         for p in ['std_srvs/Empty', 'roscpp/Empty']:
-            self.assert_(p not in l1)
+            self.assertTrue(p not in l1)
 
         output1 = Popen([sys.executable, os.path.join(_SCRIPT_FOLDER,'rossrv'), 'list'], stdout=PIPE).communicate()[0].decode()
         l1 = [x.strip() for x in output1.split('\n') if x.strip()]
         for p in ['std_srvs/Empty', 'roscpp/Empty']:
-            self.assert_(p in l1)
+            self.assertTrue(p in l1)
         for p in ['std_msgs/String', 'diagnostic_msgs/DiagnosticStatus']:
-            self.assert_(p not in l1)
+            self.assertTrue(p not in l1)
         
     def test_cmd_package(self):
         # this test is obviously very brittle, but should stabilize as the tests stabilize
@@ -114,7 +114,7 @@ class TestRosmsg(unittest.TestCase):
         output2 = Popen(['rosmsg', 'package', 'diagnostic_msgs'], stdout=PIPE).communicate()[0].decode()
         l = set([x for x in output1.split() if x])        
         l2 = set([x.strip() for x in output2.split('\n') if x.strip()])
-        self.assertEquals(l, l2)
+        self.assertEqual(l, l2)
         
         for m in ['diagnostic_msgs/DiagnosticArray',
                   'diagnostic_msgs/DiagnosticStatus',
@@ -125,7 +125,7 @@ class TestRosmsg(unittest.TestCase):
         output2 = Popen(['rossrv', 'package','diagnostic_msgs'], stdout=PIPE).communicate()[0].decode()
         l = set([x for x in output.split() if x])
         l2 = set([x.strip() for x in output2.split('\n') if x.strip()])
-        self.assertEquals(l, l2)
+        self.assertEqual(l, l2)
         
         for m in ['diagnostic_msgs/AddDiagnostics', 'diagnostic_msgs/SelfTest']:
             self.assertTrue(m in l, l)
@@ -133,14 +133,14 @@ class TestRosmsg(unittest.TestCase):
     ## test that the rosmsg/rossrv show command works
     def test_cmd_show(self):
         output = Popen(['rosmsg', 'show', 'std_msgs/String'], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals('string data', output.strip())
+        self.assertEqual('string data', output.strip())
 
         output = Popen(['rossrv', 'show', 'std_srvs/Empty'], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals('---', output.strip())
+        self.assertEqual('---', output.strip())
         output = Popen(['rossrv', 'show', 'std_srvs/Empty'], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals('---', output.strip())
+        self.assertEqual('---', output.strip())
         output = Popen(['rossrv', 'show', 'diagnostic_msgs/AddDiagnostics'], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals('string load_namespace\n---\nbool success\nstring message', output.strip())
+        self.assertEqual('string load_namespace\n---\nbool success\nstring message', output.strip())
 
         # test against test_rosmsg package
         d = os.path.abspath(os.path.dirname(__file__))
@@ -160,11 +160,11 @@ class TestRosmsg(unittest.TestCase):
         text_raw = text_raw.strip()
         type_ =test_message_package+'/'+t
         output = Popen(['rosmsg', 'show', type_], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals(text, output.strip())
+        self.assertEqual(text, output.strip())
         output = Popen(['rosmsg', 'show', '-r',type_], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals(text_raw, output.strip())
+        self.assertEqual(text_raw, output.strip())
         output = Popen(['rosmsg', 'show', '--raw', type_], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals(text_raw, output.strip())
+        self.assertEqual(text_raw, output.strip())
 
         # test as search
         type_ = t
@@ -172,8 +172,8 @@ class TestRosmsg(unittest.TestCase):
         text = os.linesep.join([text_prefix, text])
         text_raw = os.linesep.join([text_prefix, text_raw])
         output = Popen(['rosmsg', 'show', type_], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals(text, output.strip())
+        self.assertEqual(text, output.strip())
         output = Popen(['rosmsg', 'show', '-r',type_], stdout=PIPE, stderr=PIPE).communicate()
-        self.assertEquals(text_raw, output[0].decode().strip(), "Failed: %s"%(str(output)))
+        self.assertEqual(text_raw, output[0].decode().strip(), "Failed: %s"%(str(output)))
         output = Popen(['rosmsg', 'show', '--raw', type_], stdout=PIPE).communicate()[0].decode()
-        self.assertEquals(text_raw, output.strip())
+        self.assertEqual(text_raw, output.strip())
