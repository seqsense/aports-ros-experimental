# Manually created to test rosserial packages

pkgname=ros-noetic-rosserial-test
_pkgname=rosserial_test
pkgver=$(. ../ros-noetic-rosserial-python/APKBUILD && echo ${pkgver})
pkgrel=$(. ../ros-noetic-rosserial-python/APKBUILD && echo ${pkgrel})
pkgdesc="$_pkgname package for ROS noetic"
url="http://ros.org/wiki/rosserial_test"
arch="all"
license="BSD"

depends="gtest ros-noetic-roscpp ros-noetic-rosserial-client ros-noetic-rosserial-msgs ros-noetic-rosserial-python ros-noetic-rosserial-server ros-noetic-rostest ros-noetic-std-msgs"
makedepends="chrpath gtest gtest-dev py3-rosdep py3-rosinstall-generator py3-setuptools py3-vcstool ros-noetic-catkin ros-noetic-catkin-dev ros-noetic-roscpp ros-noetic-roscpp-dev ros-noetic-rosserial-client ros-noetic-rosserial-client-dev ros-noetic-rosserial-msgs ros-noetic-rosserial-msgs-dev ros-noetic-rosserial-python ros-noetic-rosserial-python-dev ros-noetic-rosserial-server ros-noetic-rosserial-server-dev ros-noetic-rostest ros-noetic-rostest-dev ros-noetic-std-msgs ros-noetic-std-msgs-dev ros-noetic-nav-msgs ros-noetic-nav-msgs-dev"
depends_dev="gtest gtest-dev ros-noetic-roscpp ros-noetic-roscpp-dev ros-noetic-rosserial-client ros-noetic-rosserial-client-dev ros-noetic-rosserial-msgs ros-noetic-rosserial-msgs-dev ros-noetic-rosserial-python ros-noetic-rosserial-python-dev ros-noetic-rosserial-server ros-noetic-rosserial-server-dev ros-noetic-rostest ros-noetic-rostest-dev ros-noetic-std-msgs ros-noetic-std-msgs-dev"

source=""
builddir="$startdir/abuild"
srcdir="/tmp/dummy-src-dir"
buildlog="$builddir/ros-abuild-build.log"
checklog="$builddir/ros-abuild-check.log"
statuslog="$builddir/ros-abuild-status.log"
if [ x${GENERATE_BUILD_LOGS} != "xyes" ]; then
  buildlog="/dev/null"
  checklog="/dev/null"
  statuslog="/dev/null"
fi

export ROS_PACKAGE_PATH="$builddir/src/$_pkgname"
export ROS_PYTHON_VERSION=3
rosinstall="- git:
    local-name: rosserial
    uri: https://github.com/ros-drivers/rosserial.git
    version: 0.9.2
"

prepare() {
  set -o pipefail
  mkdir -p $builddir
  echo "preparing" > $statuslog
  cd "$builddir"
  rm -rf src || true
  mkdir -p src
  echo "$rosinstall" > pkg.rosinstall
  vcs import --shallow --input pkg.rosinstall src

  # Remove other packages in the meta-package
  (
    cd src/rosserial
    rm -rf $(ls -1 | grep -v '^\(rosserial_test\|rosserial_arduino\)$')
  )

  find $startdir -maxdepth 1 -name "*.patch" | while read patchfile; do
    echo "Applying $patchfile"
    (cd src/rosserial && patch -p1 -i $patchfile)
  done
}

build() {
  set -o pipefail
  echo "building" > $statuslog
  cd "$builddir"
  # Overwrite shebang
  find src -type f | while read file; do
    h=$(head -n1 "$file")
    rewrite_shebang=false
    if echo $h | grep -q -s "^#!\s*/usr/bin/env\s*python$"; then
      rewrite_shebang=true
    fi
    if echo $h | grep -q -s "^#!\s*/usr/bin/python$"; then
      rewrite_shebang=true
    fi
    if [ $rewrite_shebang == "true" ]; then
      echo "WARN: rewriting python shebang of $file"
      sed -i "1c#\!/usr/bin/env python3" "$file"
    fi
  done
  source /usr/ros/noetic/setup.sh
  catkin_make_isolated \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo 2>&1 | tee $buildlog
}

check() {
  if [ -f $startdir/NOCHECK ]; then
    echo "Check skipped" | tee $checklog
    return 0
  fi
  set -o pipefail
  echo "checking" >> $statuslog
  cd "$builddir"

  if [ -z "$ROS_LOG_DIR" ]; then
    logdir="$builddir/log"
    mkdir -p "$logdir"
    export ROS_LOG_DIR="$logdir"
  fi

  source /usr/ros/noetic/setup.sh
  source devel_isolated/setup.sh
  catkin_make_isolated \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    --catkin-make-args run_tests 2>&1 | tee $checklog
  catkin_test_results 2>&1 | tee $checklog
}

package() {
  mkdir -p "$pkgdir"
}

if [ -f ./apkbuild_hook.sh ]; then
  . ./apkbuild_hook.sh
  apkbuild_hook
fi
