pkgname=ros-jazzy-navigation2
_pkgname=navigation2
pkgver=1.3.9
pkgrel=0
pkgdesc="$_pkgname package for ROS jazzy"
url="https://index.ros.org/p/$_pkgname"
arch="all"
license="Apache-2.0"

depends="ros-jazzy-nav2-amcl ros-jazzy-nav2-behavior-tree ros-jazzy-nav2-behaviors ros-jazzy-nav2-bt-navigator ros-jazzy-nav2-collision-monitor ros-jazzy-nav2-constrained-smoother ros-jazzy-nav2-controller ros-jazzy-nav2-core ros-jazzy-nav2-costmap-2d ros-jazzy-nav2-dwb-controller ros-jazzy-nav2-graceful-controller ros-jazzy-nav2-lifecycle-manager ros-jazzy-nav2-map-server ros-jazzy-nav2-mppi-controller ros-jazzy-nav2-msgs ros-jazzy-nav2-navfn-planner ros-jazzy-nav2-planner ros-jazzy-nav2-regulated-pure-pursuit-controller ros-jazzy-nav2-rotation-shim-controller ros-jazzy-nav2-rviz-plugins ros-jazzy-nav2-simple-commander ros-jazzy-nav2-smac-planner ros-jazzy-nav2-smoother ros-jazzy-nav2-theta-star-planner ros-jazzy-nav2-util ros-jazzy-nav2-velocity-smoother ros-jazzy-nav2-voxel-grid ros-jazzy-nav2-waypoint-follower ros-jazzy-opennav-docking ros-jazzy-opennav-docking-bt ros-jazzy-opennav-docking-core ros-jazzy-ros-workspace"
makedepends="chrpath py3-rosdep py3-rosinstall-generator py3-setuptools py3-vcstool ros-jazzy-ament-cmake ros-jazzy-ament-cmake-dev ros-jazzy-nav2-amcl-dev ros-jazzy-nav2-behavior-tree-dev ros-jazzy-nav2-behaviors-dev ros-jazzy-nav2-bt-navigator-dev ros-jazzy-nav2-collision-monitor-dev ros-jazzy-nav2-constrained-smoother-dev ros-jazzy-nav2-controller-dev ros-jazzy-nav2-core-dev ros-jazzy-nav2-costmap-2d-dev ros-jazzy-nav2-dwb-controller-dev ros-jazzy-nav2-graceful-controller-dev ros-jazzy-nav2-lifecycle-manager-dev ros-jazzy-nav2-map-server-dev ros-jazzy-nav2-mppi-controller-dev ros-jazzy-nav2-msgs-dev ros-jazzy-nav2-navfn-planner-dev ros-jazzy-nav2-planner-dev ros-jazzy-nav2-regulated-pure-pursuit-controller-dev ros-jazzy-nav2-rotation-shim-controller-dev ros-jazzy-nav2-rviz-plugins-dev ros-jazzy-nav2-simple-commander-dev ros-jazzy-nav2-smac-planner-dev ros-jazzy-nav2-smoother-dev ros-jazzy-nav2-theta-star-planner-dev ros-jazzy-nav2-util-dev ros-jazzy-nav2-velocity-smoother-dev ros-jazzy-nav2-voxel-grid-dev ros-jazzy-nav2-waypoint-follower-dev ros-jazzy-opennav-docking-bt-dev ros-jazzy-opennav-docking-core-dev ros-jazzy-opennav-docking-dev ros-jazzy-ros-workspace-dev"
depends_dev="ros-jazzy-nav2-amcl-dev ros-jazzy-nav2-behavior-tree-dev ros-jazzy-nav2-behaviors-dev ros-jazzy-nav2-bt-navigator-dev ros-jazzy-nav2-collision-monitor-dev ros-jazzy-nav2-constrained-smoother-dev ros-jazzy-nav2-controller-dev ros-jazzy-nav2-core-dev ros-jazzy-nav2-costmap-2d-dev ros-jazzy-nav2-dwb-controller-dev ros-jazzy-nav2-graceful-controller-dev ros-jazzy-nav2-lifecycle-manager-dev ros-jazzy-nav2-map-server-dev ros-jazzy-nav2-mppi-controller-dev ros-jazzy-nav2-msgs-dev ros-jazzy-nav2-navfn-planner-dev ros-jazzy-nav2-planner-dev ros-jazzy-nav2-regulated-pure-pursuit-controller-dev ros-jazzy-nav2-rotation-shim-controller-dev ros-jazzy-nav2-rviz-plugins-dev ros-jazzy-nav2-simple-commander-dev ros-jazzy-nav2-smac-planner-dev ros-jazzy-nav2-smoother-dev ros-jazzy-nav2-theta-star-planner-dev ros-jazzy-nav2-util-dev ros-jazzy-nav2-velocity-smoother-dev ros-jazzy-nav2-voxel-grid-dev ros-jazzy-nav2-waypoint-follower-dev ros-jazzy-opennav-docking-bt-dev ros-jazzy-opennav-docking-core-dev ros-jazzy-opennav-docking-dev ros-jazzy-ros-workspace-dev"

subpackages="$pkgname-dbg $pkgname-doc $pkgname-dev"

source=""
builddir="$startdir/abuild"
srcdir="/tmp/dummy-src-dir"
buildlog="$builddir/ros-abuild-build.log"
checklog="$builddir/ros-abuild-check.log"
statuslog="$builddir/ros-abuild-status.log"
if [ x${GENERATE_BUILD_LOGS} != "xyes" ]; then
  buildlog="/dev/null"
  checklog="/dev/null"
  statuslog="/dev/null"
fi

export ROS_PYTHON_VERSION=3
export PYTHON_VERSION=$(python3 -c 'import sys; print("%i.%i" % (sys.version_info.major, sys.version_info.minor))')
if [ ! -f /usr/ros/jazzy/setup.sh ]; then
  export PYTHONPATH=/usr/ros/jazzy/lib/python${PYTHON_VERSION}/site-packages:$PYTHONPATH
  export AMENT_PREFIX_PATH=/usr/ros/jazzy
fi
rosinstall="- git:
    local-name: navigation2
    uri: https://github.com/SteveMacenski/navigation2-release.git
    version: release/jazzy/navigation2/1.3.9-1
"

prepare() {
  set -o pipefail
  mkdir -p $builddir
  echo "preparing" > $statuslog
  cd "$builddir"
  rm -rf src || true
  mkdir -p src
  echo "$rosinstall" > pkg.rosinstall
  vcs import --shallow --input pkg.rosinstall src
  find $startdir -maxdepth 1 -name "*.patch" | while read patchfile; do
    echo "Applying $patchfile"
    (cd src/* && patch -p1 -i $patchfile)
  done
}

build() {
  set -o pipefail
  echo "building" > $statuslog
  cd "$builddir"
  if [ -f /usr/ros/jazzy/setup.sh ]; then
    source /usr/ros/jazzy/setup.sh
  fi
  mkdir build
  cd build
  cmake ../src/$_pkgname \
    -DCMAKE_INSTALL_PREFIX=/usr/ros/jazzy \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_LIBDIR=lib 2>&1 | tee $buildlog
  make 2>&1 | tee -a $buildlog
}

check() {
  if [ -f $startdir/NOCHECK ]; then
    echo "Check skipped" | tee $checklog
    return 0
  fi
  set -o pipefail
  echo "checking" >> $statuslog
  cd "$builddir"
  if [ -f /usr/ros/jazzy/setup.sh ]; then
    source /usr/ros/jazzy/setup.sh
  fi
  export PYTHONPATH="$builddir"/tmp/pkg/usr/ros/jazzy/lib/python${PYTHON_VERSION}/site-packages:${PYTHONPATH}
  export AMENT_PREFIX_PATH="$builddir"/tmp/pkg/usr/ros/jazzy:${AMENT_PREFIX_PATH}
  export PATH="$builddir"/tmp/pkg/usr/ros/jazzy/bin:${PATH}
  export LD_LIBRARY_PATH="$builddir"/tmp/pkg/usr/ros/jazzy/lib:${LD_LIBRARY_PATH}
  mkdir -p "$builddir"/tmp/pkg
  cd build
  make install DESTDIR="$builddir"/tmp/pkg
  if [ $(make -q test > /dev/null 2> /dev/null; echo $?) -eq 1 ]; then
    make test 2>&1 | tee $checklog
  fi
}

dbg() {
  mkdir -p "$subpkgdir"
  default_dbg
}

package() {
  echo "packaging" >> $statuslog
  mkdir -p "$pkgdir"
  cd "$builddir"
  export DESTDIR="$pkgdir"

  if [ -f /usr/ros/jazzy/setup.sh ]; then
    source /usr/ros/jazzy/setup.sh
  fi
  cd build
  make install

  # Tweak invalid RPATH
  find $pkgdir -name "*.so" | while read so; do
    chrpath_out=$(chrpath ${so} || true)
    if echo ${chrpath_out} | grep -q "R\(UN\)\?PATH="; then
      rpath=$(echo -n "${chrpath_out}" | sed -e "s/^.*R\(UN\)\?PATH=//")
      if echo "${rpath}" | grep -q -e "\(home\|aports\)"; then
        echo "RPATH contains home/aports!: ${rpath}"
        rpathfix=$(echo -n "${rpath}" | tr ":" "\n" \
          | grep -v -e home | grep -v -e aports \
          | tr "\n" ":" | sed -e "s/:$//; s/::/:/;")
        echo "Fixing to ${rpathfix}"
        chrpath -r ${rpathfix} ${so} || (echo chrpath failed; false)
      fi
    fi
  done

  # Tweak hardcoded library versions
  find $pkgdir -name "*.cmake" | while read cm; do
    libs=$(sed -n '/^set(libraries/{s/^.*"\(.*\)")$/\1/;s/;/ /g;p}' $cm)
    for lib in $libs; do
      rep=
      # lib.so.0.1.2 -> lib.so.0.1
      if echo $lib | grep -q -e '\.so\.[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$'; then
        rep=$(echo $lib | sed -e 's/\(\.so\.[0-9]\{1,\}\.[0-9]\{1,\}\)\.[0-9]\{1,\}$/\1/')
      fi
      # lib-0.1.so.2 -> lib-0.1.so
      if echo $lib | grep -q -e '-[0-9]\{1,\}\.[0-9]\{1,\}\.so\.[0-9]\{1,\}$'; then
        rep=$(echo $lib | sed -e 's/\(-[0-9]\{1,\}\.[0-9]\{1,\}\.so\)\.[0-9]\{1,\}$/\1/')
      fi

      if [ ! -z "$rep" ]; then
        if [ -f $rep ]; then
          echo "$cm: $lib -> $rep"
          sed -e "s|\([\";]\)$lib\([\";]\)|\1$rep\2|g" -i $cm
        else
          echo "$cm: $lib is specified, but $rep doesn't exist"
        fi
      fi
    done
  done

  # Install license files
  licensedir="$pkgdir"/usr/share/licenses/$pkgname/
  cd $builddir/src/$_pkgname
  find . \
      -iname "license*" -or \
      -iname "copyright*" -or \
      -iname "copying*" -or \
      -iname "gnu-*gpl*" \
    | while read file; do
    # Copy license files under the source
    if echo $file | grep -e '^\./\.'; then
      # Omit files under hidden directory
      continue
    fi
    if echo $file | grep -e '^\./build/'; then
      # Omit files under build directory
      continue
    fi
    echo "Copying license files from source tree: $file"
    install -Dm644 $file "$licensedir"/$file
  done
  if [ -f $startdir/LICENSE ]; then
    # If LICENSE file is in aports directory, copy it
    echo "Copying license file from aports"
    install -Dm644 $startdir/LICENSE "$licensedir"/LICENSE
  fi
  if [ -f $startdir/LICENSE_URLS ]; then
    # If LICENSE_URLS file is in aports directory, download it
    echo "Downloading license file from URLs"
    cat $startdir/LICENSE_URLS | while read url; do
      echo "- $url"
      mkdir -p "$licensedir"
      wget -O "$licensedir"/$(basename $url) $url
    done
  fi
  if [ -z "$(find "$licensedir" -type f)" ]; then
    # If no explicit license file found, extract from source files
    mkdir -p "$licensedir"
    echo "Copying license from source file headers"
    find . -name "*.h" -or -name "*.c" -or -name "*.cpp" -or -name "*.py" | while read file; do
      echo "Checking license header in $file"
      tmplicense=$(mktemp)
      # Extract heading comment
      sed -n '1{/^#!/d};
        /\/\*/{/\*\//d; :l0; p; n; /\*\//!b l0; p; q};
        /^\s*#/{:l1; /^#!/!p; n; /^\s*#/b l1; q};
        /^\s*\/\//{:l2; p; n; /^\s*\/\//b l2; q};' $file > $tmplicense
      # Remove comment syntax
      sed 's/\/\*//; s/\*\///; s/^s*\/\/\s\{0,1\}//;
        s/^ \* \{0,1\}//; s/^\s*# \{0,1\}//; s/\s\+$//;' -i $tmplicense
      # Trim empty lines
      sed ':l0; /^$/d; n; /^$/!b l0; :l1; n; b l1;' -i $tmplicense
      sed '${/^$/d}' -i $tmplicense

      if ! grep -i -e "\(license\|copyright\|copyleft\)" $tmplicense > /dev/null; then
        # Looks not like a license statement
        echo "No license statement"
        rm -f $tmplicense
        continue
      fi

      echo "Checking duplication"
      licenses=$(mktemp)
      find "$licensedir" -type f > $licenses
      savethis=true
      while read existing; do
        if diff -bBiw $tmplicense $existing > /dev/null; then
          # Same license statement found
          savethis=false
          break
        fi
      done < $licenses

      if $savethis; then
        # Save license statement
        local num=0
        while true; do
          newfile="$licensedir"/LICENSE.$num
          if [ ! -f "$newfile" ]; then
            echo "Saving license statement as $newfile"
            mv $tmplicense $newfile
            break
          fi
          num=$(expr $num + 1)
        done
      fi

      rm -f $licenses $tmplicense
    done
  fi
  # List license files
  echo "License files:"
  find "$licensedir" -type f | xargs -n1 echo "-"

  echo "finished" >> $statuslog
}

doc() {
  mkdir -p $subpkgdir

  default_doc
}

dev() {
  local i=
  mkdir -p $subpkgdir

  install_if="${subpkgname%-dev}=$pkgver-r$pkgrel ros-dev"
	depends="$depends_dev"
	pkgdesc="$pkgdesc (development files)"

  cd $pkgdir || return 0

  for i in \
    usr/ros/*/lib/pkgconfig \
    usr/ros/*/share/*/cmake \
    usr/ros/*/include \
    $(find usr/ros/*/lib -name -name '*.[choa]' -o -name '*.prl' 2>/dev/null); do
    if [ -e "$i" ] || [ -L "$i" ]; then
      amove "$i"
    fi
  done
}

if [ -f ./apkbuild_hook.sh ]; then
  . ./apkbuild_hook.sh
  apkbuild_hook
fi
