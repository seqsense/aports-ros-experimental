diff --git a/tests/base/planner_data.cpp b/tests/base/planner_data.cpp
index 0a480d11..c9d37dec 100644
--- a/tests/base/planner_data.cpp
+++ b/tests/base/planner_data.cpp
@@ -478,88 +478,88 @@ protected:
 };
 
 // This allows us to serialize the derived class PlannerDataTestVertex
-BOOST_CLASS_EXPORT(PlannerDataTestVertex);
-
-BOOST_AUTO_TEST_CASE(Serialization)
-{
-    auto space(std::make_shared<base::RealVectorStateSpace>(1));
-    auto si(std::make_shared<base::SpaceInformation>(space));
-    base::PlannerData data(si);
-    std::vector<base::State*> states;
-
-    // Creating 1000 states
-    for (unsigned int i = 0; i < 1000; ++i)
-    {
-        states.push_back(space->allocState());
-        states[i]->as<base::RealVectorStateSpace::StateType>()->values[0] = (double)i;
-
-        PlannerDataTestVertex vtx(states[i], i, i+1);
-        BOOST_CHECK (data.addVertex(vtx) == i );
-        BOOST_CHECK (data.getVertex(i).getTag() == (signed)i);
-        BOOST_CHECK (static_cast<PlannerDataTestVertex&>(data.getVertex(i)).tag2_ == (signed)i+1);
-    }
-
-    // Mark some start and goal states
-    data.markStartState(states[0]);
-    data.markStartState(states[states.size()/2]);
-    data.markStartState(states[states.size()-1]);
-    data.markGoalState(states[1]);
-    data.markGoalState(states[states.size()-2]);
-
-    // Add a whole bunch of random edges
-    unsigned int num_edges_to_add = 10000;
-    ompl::RNG rng;
-
-    for (unsigned int i = 0; i < num_edges_to_add; ++i)
-    {
-        unsigned int v2, v1 = rng.uniformInt(0, states.size()-1);
-        do v2 = rng.uniformInt(0, states.size()-1); while (v2 == v1 || data.edgeExists(v1, v2));
-
-        BOOST_CHECK( data.addEdge(v1, v2) );
-    }
-
-    BOOST_CHECK_EQUAL ( data.numVertices(), states.size() );
-    BOOST_CHECK_EQUAL ( data.numEdges(), num_edges_to_add );
-
-    base::PlannerData data2(si);
-    base::PlannerDataStorage storage;
-    storage.store(data, "testdata");
-    storage.load("testdata", data2);
-
-    // Verify that data == data2
-    BOOST_CHECK_EQUAL ( data2.numVertices(), states.size() );
-    BOOST_CHECK_EQUAL ( data2.numEdges(), num_edges_to_add );
-
-    // Check our start/goal states
-    BOOST_CHECK ( data2.numStartVertices() == 3 );
-    BOOST_CHECK ( data2.numGoalVertices() == 2 );
-    BOOST_CHECK ( data2.isStartVertex(0) );
-    BOOST_CHECK ( data2.isStartVertex(states.size()/2) );
-    BOOST_CHECK ( data2.isStartVertex(states.size()-1) );
-    BOOST_CHECK ( data2.isGoalVertex(1) );
-    BOOST_CHECK ( data2.isGoalVertex(states.size()-2) );
-
-    for (size_t i = 0; i < states.size(); ++i)
-    {
-        BOOST_CHECK (space->equalStates(data2.getVertex(i).getState(), states[i]) );
-        BOOST_CHECK (data.getVertex(i).getTag() == data2.getVertex(i).getTag() );
-        BOOST_CHECK (static_cast<PlannerDataTestVertex&>(data2.getVertex(i)).tag2_ == (signed)i+1);
-    }
-
-    for (size_t i = 0; i < states.size(); ++i)
-    {
-        std::vector<unsigned int> neighbors, neighbors2;
-        data.getEdges(i, neighbors);
-        data2.getEdges(i, neighbors2);
-
-        std::sort (neighbors.begin(), neighbors.end());
-        std::sort (neighbors2.begin(), neighbors2.end());
-        BOOST_REQUIRE_EQUAL( neighbors.size(), neighbors2.size() );
-
-        for (size_t j = 0; j < neighbors.size(); ++j)
-            BOOST_CHECK_EQUAL( neighbors[j], neighbors2[j] );
-    }
-
-    for (auto & state : states)
-        space->freeState(state);
-}
+// BOOST_CLASS_EXPORT(PlannerDataTestVertex);
+//
+// BOOST_AUTO_TEST_CASE(Serialization)
+// {
+//     auto space(std::make_shared<base::RealVectorStateSpace>(1));
+//     auto si(std::make_shared<base::SpaceInformation>(space));
+//     base::PlannerData data(si);
+//     std::vector<base::State*> states;
+//
+//     // Creating 1000 states
+//     for (unsigned int i = 0; i < 1000; ++i)
+//     {
+//         states.push_back(space->allocState());
+//         states[i]->as<base::RealVectorStateSpace::StateType>()->values[0] = (double)i;
+//
+//         PlannerDataTestVertex vtx(states[i], i, i+1);
+//         BOOST_CHECK (data.addVertex(vtx) == i );
+//         BOOST_CHECK (data.getVertex(i).getTag() == (signed)i);
+//         BOOST_CHECK (static_cast<PlannerDataTestVertex&>(data.getVertex(i)).tag2_ == (signed)i+1);
+//     }
+//
+//     // Mark some start and goal states
+//     data.markStartState(states[0]);
+//     data.markStartState(states[states.size()/2]);
+//     data.markStartState(states[states.size()-1]);
+//     data.markGoalState(states[1]);
+//     data.markGoalState(states[states.size()-2]);
+//
+//     // Add a whole bunch of random edges
+//     unsigned int num_edges_to_add = 10000;
+//     ompl::RNG rng;
+//
+//     for (unsigned int i = 0; i < num_edges_to_add; ++i)
+//     {
+//         unsigned int v2, v1 = rng.uniformInt(0, states.size()-1);
+//         do v2 = rng.uniformInt(0, states.size()-1); while (v2 == v1 || data.edgeExists(v1, v2));
+//
+//         BOOST_CHECK( data.addEdge(v1, v2) );
+//     }
+//
+//     BOOST_CHECK_EQUAL ( data.numVertices(), states.size() );
+//     BOOST_CHECK_EQUAL ( data.numEdges(), num_edges_to_add );
+//
+//     base::PlannerData data2(si);
+//     base::PlannerDataStorage storage;
+//     storage.store(data, "testdata");
+//     storage.load("testdata", data2);
+//
+//     // Verify that data == data2
+//     BOOST_CHECK_EQUAL ( data2.numVertices(), states.size() );
+//     BOOST_CHECK_EQUAL ( data2.numEdges(), num_edges_to_add );
+//
+//     // Check our start/goal states
+//     BOOST_CHECK ( data2.numStartVertices() == 3 );
+//     BOOST_CHECK ( data2.numGoalVertices() == 2 );
+//     BOOST_CHECK ( data2.isStartVertex(0) );
+//     BOOST_CHECK ( data2.isStartVertex(states.size()/2) );
+//     BOOST_CHECK ( data2.isStartVertex(states.size()-1) );
+//     BOOST_CHECK ( data2.isGoalVertex(1) );
+//     BOOST_CHECK ( data2.isGoalVertex(states.size()-2) );
+//
+//     for (size_t i = 0; i < states.size(); ++i)
+//     {
+//         BOOST_CHECK (space->equalStates(data2.getVertex(i).getState(), states[i]) );
+//         BOOST_CHECK (data.getVertex(i).getTag() == data2.getVertex(i).getTag() );
+//         BOOST_CHECK (static_cast<PlannerDataTestVertex&>(data2.getVertex(i)).tag2_ == (signed)i+1);
+//     }
+//
+//     for (size_t i = 0; i < states.size(); ++i)
+//     {
+//         std::vector<unsigned int> neighbors, neighbors2;
+//         data.getEdges(i, neighbors);
+//         data2.getEdges(i, neighbors2);
+//
+//         std::sort (neighbors.begin(), neighbors.end());
+//         std::sort (neighbors2.begin(), neighbors2.end());
+//         BOOST_REQUIRE_EQUAL( neighbors.size(), neighbors2.size() );
+//
+//         for (size_t j = 0; j < neighbors.size(); ++j)
+//             BOOST_CHECK_EQUAL( neighbors[j], neighbors2[j] );
+//     }
+//
+//     for (auto & state : states)
+//         space->freeState(state);
+// }
